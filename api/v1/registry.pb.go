// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/registry.proto

package v1

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	math "math"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ApplicationType int32

const (
	ApplicationType_EXTENSION ApplicationType = 0
	ApplicationType_DEMO      ApplicationType = 1
	ApplicationType_MESH      ApplicationType = 2
)

var ApplicationType_name = map[int32]string{
	0: "EXTENSION",
	1: "DEMO",
	2: "MESH",
}

var ApplicationType_value = map[string]int32{
	"EXTENSION": 0,
	"DEMO":      1,
	"MESH":      2,
}

func (x ApplicationType) String() string {
	return proto.EnumName(ApplicationType_name, int32(x))
}

func (ApplicationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{0}
}

type MeshType int32

const (
	MeshType_ISTIO        MeshType = 0
	MeshType_LINKERD      MeshType = 1
	MeshType_AWS_APP_MESH MeshType = 2
)

var MeshType_name = map[int32]string{
	0: "ISTIO",
	1: "LINKERD",
	2: "AWS_APP_MESH",
}

var MeshType_value = map[string]int32{
	"ISTIO":        0,
	"LINKERD":      1,
	"AWS_APP_MESH": 2,
}

func (x MeshType) String() string {
	return proto.EnumName(MeshType_name, int32(x))
}

func (MeshType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{1}
}

// This is static content for an application. It includes basic metadata that is common to every version of an
// application, and a list of versions. For each version, there is information about how to install the application
// (for example, a Helm chart location), and the requirements for installation.
type ApplicationSpec struct {
	Type             ApplicationType `protobuf:"varint,1,opt,name=type,proto3,enum=hub.solo.io.ApplicationType" json:"type,omitempty"`
	Name             string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	LogoUrl          string          `protobuf:"bytes,3,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	ShortDescription string          `protobuf:"bytes,4,opt,name=short_description,json=shortDescription,proto3" json:"short_description,omitempty"`
	// Note that long description will be overwritten by the content of description.md if provided.
	LongDescription       string                      `protobuf:"bytes,5,opt,name=long_description,json=longDescription,proto3" json:"long_description,omitempty"`
	DocumentationUrl      string                      `protobuf:"bytes,6,opt,name=documentation_url,json=documentationUrl,proto3" json:"documentation_url,omitempty"`
	RepositoryUrl         string                      `protobuf:"bytes,7,opt,name=repository_url,json=repositoryUrl,proto3" json:"repository_url,omitempty"`
	ApplicationCreator    string                      `protobuf:"bytes,8,opt,name=application_creator,json=applicationCreator,proto3" json:"application_creator,omitempty"`
	ApplicationProvider   string                      `protobuf:"bytes,9,opt,name=application_provider,json=applicationProvider,proto3" json:"application_provider,omitempty"`
	ApplicationMaintainer string                      `protobuf:"bytes,10,opt,name=application_maintainer,json=applicationMaintainer,proto3" json:"application_maintainer,omitempty"`
	DateCreated           *time.Time                  `protobuf:"bytes,11,opt,name=date_created,json=dateCreated,proto3,stdtime" json:"date_created,omitempty"`
	Versions              []*VersionedApplicationSpec `protobuf:"bytes,12,rep,name=versions,proto3" json:"versions,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                    `json:"-"`
	XXX_unrecognized      []byte                      `json:"-"`
	XXX_sizecache         int32                       `json:"-"`
}

func (m *ApplicationSpec) Reset()         { *m = ApplicationSpec{} }
func (m *ApplicationSpec) String() string { return proto.CompactTextString(m) }
func (*ApplicationSpec) ProtoMessage()    {}
func (*ApplicationSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{0}
}
func (m *ApplicationSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationSpec.Unmarshal(m, b)
}
func (m *ApplicationSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationSpec.Marshal(b, m, deterministic)
}
func (m *ApplicationSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSpec.Merge(m, src)
}
func (m *ApplicationSpec) XXX_Size() int {
	return xxx_messageInfo_ApplicationSpec.Size(m)
}
func (m *ApplicationSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSpec proto.InternalMessageInfo

func (m *ApplicationSpec) GetType() ApplicationType {
	if m != nil {
		return m.Type
	}
	return ApplicationType_EXTENSION
}

func (m *ApplicationSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApplicationSpec) GetLogoUrl() string {
	if m != nil {
		return m.LogoUrl
	}
	return ""
}

func (m *ApplicationSpec) GetShortDescription() string {
	if m != nil {
		return m.ShortDescription
	}
	return ""
}

func (m *ApplicationSpec) GetLongDescription() string {
	if m != nil {
		return m.LongDescription
	}
	return ""
}

func (m *ApplicationSpec) GetDocumentationUrl() string {
	if m != nil {
		return m.DocumentationUrl
	}
	return ""
}

func (m *ApplicationSpec) GetRepositoryUrl() string {
	if m != nil {
		return m.RepositoryUrl
	}
	return ""
}

func (m *ApplicationSpec) GetApplicationCreator() string {
	if m != nil {
		return m.ApplicationCreator
	}
	return ""
}

func (m *ApplicationSpec) GetApplicationProvider() string {
	if m != nil {
		return m.ApplicationProvider
	}
	return ""
}

func (m *ApplicationSpec) GetApplicationMaintainer() string {
	if m != nil {
		return m.ApplicationMaintainer
	}
	return ""
}

func (m *ApplicationSpec) GetDateCreated() *time.Time {
	if m != nil {
		return m.DateCreated
	}
	return nil
}

func (m *ApplicationSpec) GetVersions() []*VersionedApplicationSpec {
	if m != nil {
		return m.Versions
	}
	return nil
}

type ApplicationSpecs struct {
	Specs                []*ApplicationSpec `protobuf:"bytes,1,rep,name=specs,proto3" json:"specs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ApplicationSpecs) Reset()         { *m = ApplicationSpecs{} }
func (m *ApplicationSpecs) String() string { return proto.CompactTextString(m) }
func (*ApplicationSpecs) ProtoMessage()    {}
func (*ApplicationSpecs) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{1}
}
func (m *ApplicationSpecs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationSpecs.Unmarshal(m, b)
}
func (m *ApplicationSpecs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationSpecs.Marshal(b, m, deterministic)
}
func (m *ApplicationSpecs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSpecs.Merge(m, src)
}
func (m *ApplicationSpecs) XXX_Size() int {
	return xxx_messageInfo_ApplicationSpecs.Size(m)
}
func (m *ApplicationSpecs) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSpecs.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSpecs proto.InternalMessageInfo

func (m *ApplicationSpecs) GetSpecs() []*ApplicationSpec {
	if m != nil {
		return m.Specs
	}
	return nil
}

// Represents a specific version of an extension.
type VersionedApplicationSpec struct {
	// The version of the application
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// The date this version of the application was published
	DatePublished *time.Time `protobuf:"bytes,2,opt,name=date_published,json=datePublished,proto3,stdtime" json:"date_published,omitempty"`
	// Location of the Helm chart that will be used to install this application
	//
	// Types that are valid to be assigned to InstallationSpec:
	//	*VersionedApplicationSpec_GithubChart
	//	*VersionedApplicationSpec_HelmArchive
	//	*VersionedApplicationSpec_ManifestsArchive
	//	*VersionedApplicationSpec_InstallationSteps
	InstallationSpec isVersionedApplicationSpec_InstallationSpec `protobuf_oneof:"installation_spec"`
	// Optional default values yaml; if none provided, chart default will be used
	ValuesYaml string `protobuf:"bytes,30,opt,name=values_yaml,json=valuesYaml,proto3" json:"values_yaml,omitempty"`
	// Optional filter on the resources that should be considered part of the install, to handle cases
	// where a single chart can be used to deploy many applications (i.e. Istio chart deploys Kiali)
	RequiredLabels map[string]string `protobuf:"bytes,31,rep,name=required_labels,json=requiredLabels,proto3" json:"required_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Mesh-specific modifications to the extension installation manifest.
	Flavors              []*Flavor `protobuf:"bytes,40,rep,name=flavors,proto3" json:"flavors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *VersionedApplicationSpec) Reset()         { *m = VersionedApplicationSpec{} }
func (m *VersionedApplicationSpec) String() string { return proto.CompactTextString(m) }
func (*VersionedApplicationSpec) ProtoMessage()    {}
func (*VersionedApplicationSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{2}
}
func (m *VersionedApplicationSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionedApplicationSpec.Unmarshal(m, b)
}
func (m *VersionedApplicationSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionedApplicationSpec.Marshal(b, m, deterministic)
}
func (m *VersionedApplicationSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionedApplicationSpec.Merge(m, src)
}
func (m *VersionedApplicationSpec) XXX_Size() int {
	return xxx_messageInfo_VersionedApplicationSpec.Size(m)
}
func (m *VersionedApplicationSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionedApplicationSpec.DiscardUnknown(m)
}

var xxx_messageInfo_VersionedApplicationSpec proto.InternalMessageInfo

type isVersionedApplicationSpec_InstallationSpec interface {
	isVersionedApplicationSpec_InstallationSpec()
	Equal(interface{}) bool
}

type VersionedApplicationSpec_GithubChart struct {
	GithubChart *GithubRepositoryLocation `protobuf:"bytes,13,opt,name=github_chart,json=githubChart,proto3,oneof"`
}
type VersionedApplicationSpec_HelmArchive struct {
	HelmArchive *TgzLocation `protobuf:"bytes,14,opt,name=helm_archive,json=helmArchive,proto3,oneof"`
}
type VersionedApplicationSpec_ManifestsArchive struct {
	ManifestsArchive *TgzLocation `protobuf:"bytes,15,opt,name=manifests_archive,json=manifestsArchive,proto3,oneof"`
}
type VersionedApplicationSpec_InstallationSteps struct {
	InstallationSteps *InstallationSteps `protobuf:"bytes,16,opt,name=installation_steps,json=installationSteps,proto3,oneof"`
}

func (*VersionedApplicationSpec_GithubChart) isVersionedApplicationSpec_InstallationSpec()       {}
func (*VersionedApplicationSpec_HelmArchive) isVersionedApplicationSpec_InstallationSpec()       {}
func (*VersionedApplicationSpec_ManifestsArchive) isVersionedApplicationSpec_InstallationSpec()  {}
func (*VersionedApplicationSpec_InstallationSteps) isVersionedApplicationSpec_InstallationSpec() {}

func (m *VersionedApplicationSpec) GetInstallationSpec() isVersionedApplicationSpec_InstallationSpec {
	if m != nil {
		return m.InstallationSpec
	}
	return nil
}

func (m *VersionedApplicationSpec) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *VersionedApplicationSpec) GetDatePublished() *time.Time {
	if m != nil {
		return m.DatePublished
	}
	return nil
}

func (m *VersionedApplicationSpec) GetGithubChart() *GithubRepositoryLocation {
	if x, ok := m.GetInstallationSpec().(*VersionedApplicationSpec_GithubChart); ok {
		return x.GithubChart
	}
	return nil
}

func (m *VersionedApplicationSpec) GetHelmArchive() *TgzLocation {
	if x, ok := m.GetInstallationSpec().(*VersionedApplicationSpec_HelmArchive); ok {
		return x.HelmArchive
	}
	return nil
}

func (m *VersionedApplicationSpec) GetManifestsArchive() *TgzLocation {
	if x, ok := m.GetInstallationSpec().(*VersionedApplicationSpec_ManifestsArchive); ok {
		return x.ManifestsArchive
	}
	return nil
}

func (m *VersionedApplicationSpec) GetInstallationSteps() *InstallationSteps {
	if x, ok := m.GetInstallationSpec().(*VersionedApplicationSpec_InstallationSteps); ok {
		return x.InstallationSteps
	}
	return nil
}

func (m *VersionedApplicationSpec) GetValuesYaml() string {
	if m != nil {
		return m.ValuesYaml
	}
	return ""
}

func (m *VersionedApplicationSpec) GetRequiredLabels() map[string]string {
	if m != nil {
		return m.RequiredLabels
	}
	return nil
}

func (m *VersionedApplicationSpec) GetFlavors() []*Flavor {
	if m != nil {
		return m.Flavors
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*VersionedApplicationSpec) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _VersionedApplicationSpec_OneofMarshaler, _VersionedApplicationSpec_OneofUnmarshaler, _VersionedApplicationSpec_OneofSizer, []interface{}{
		(*VersionedApplicationSpec_GithubChart)(nil),
		(*VersionedApplicationSpec_HelmArchive)(nil),
		(*VersionedApplicationSpec_ManifestsArchive)(nil),
		(*VersionedApplicationSpec_InstallationSteps)(nil),
	}
}

func _VersionedApplicationSpec_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*VersionedApplicationSpec)
	// installation_spec
	switch x := m.InstallationSpec.(type) {
	case *VersionedApplicationSpec_GithubChart:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GithubChart); err != nil {
			return err
		}
	case *VersionedApplicationSpec_HelmArchive:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HelmArchive); err != nil {
			return err
		}
	case *VersionedApplicationSpec_ManifestsArchive:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ManifestsArchive); err != nil {
			return err
		}
	case *VersionedApplicationSpec_InstallationSteps:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InstallationSteps); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VersionedApplicationSpec.InstallationSpec has unexpected type %T", x)
	}
	return nil
}

func _VersionedApplicationSpec_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*VersionedApplicationSpec)
	switch tag {
	case 13: // installation_spec.github_chart
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GithubRepositoryLocation)
		err := b.DecodeMessage(msg)
		m.InstallationSpec = &VersionedApplicationSpec_GithubChart{msg}
		return true, err
	case 14: // installation_spec.helm_archive
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TgzLocation)
		err := b.DecodeMessage(msg)
		m.InstallationSpec = &VersionedApplicationSpec_HelmArchive{msg}
		return true, err
	case 15: // installation_spec.manifests_archive
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TgzLocation)
		err := b.DecodeMessage(msg)
		m.InstallationSpec = &VersionedApplicationSpec_ManifestsArchive{msg}
		return true, err
	case 16: // installation_spec.installation_steps
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InstallationSteps)
		err := b.DecodeMessage(msg)
		m.InstallationSpec = &VersionedApplicationSpec_InstallationSteps{msg}
		return true, err
	default:
		return false, nil
	}
}

func _VersionedApplicationSpec_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*VersionedApplicationSpec)
	// installation_spec
	switch x := m.InstallationSpec.(type) {
	case *VersionedApplicationSpec_GithubChart:
		s := proto.Size(x.GithubChart)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VersionedApplicationSpec_HelmArchive:
		s := proto.Size(x.HelmArchive)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VersionedApplicationSpec_ManifestsArchive:
		s := proto.Size(x.ManifestsArchive)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VersionedApplicationSpec_InstallationSteps:
		s := proto.Size(x.InstallationSteps)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// InstallationSteps specify an installation procedure for Applications composed of multiple manifests.
// It may be desirable or necessary for an Application to be installed in stages, e.g. to run a pre-installation
// job or container before deploying other components.
// Resources will be applied to the Kubernetes cluster in the order they appear in the installation steps.
// Resources created from each step will be labeled with the step from which they were created.
// Finally, after each step is applied, any resources created by Flavor customizations will be created last.
type InstallationSteps struct {
	// an ordered list of installation steps
	Steps                []*InstallationSteps_Step `protobuf:"bytes,1,rep,name=steps,proto3" json:"steps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *InstallationSteps) Reset()         { *m = InstallationSteps{} }
func (m *InstallationSteps) String() string { return proto.CompactTextString(m) }
func (*InstallationSteps) ProtoMessage()    {}
func (*InstallationSteps) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{3}
}
func (m *InstallationSteps) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstallationSteps.Unmarshal(m, b)
}
func (m *InstallationSteps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstallationSteps.Marshal(b, m, deterministic)
}
func (m *InstallationSteps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallationSteps.Merge(m, src)
}
func (m *InstallationSteps) XXX_Size() int {
	return xxx_messageInfo_InstallationSteps.Size(m)
}
func (m *InstallationSteps) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallationSteps.DiscardUnknown(m)
}

var xxx_messageInfo_InstallationSteps proto.InternalMessageInfo

func (m *InstallationSteps) GetSteps() []*InstallationSteps_Step {
	if m != nil {
		return m.Steps
	}
	return nil
}

type InstallationSteps_Step struct {
	// name of the installation step
	// each step must be uniquely named
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to Step:
	//	*InstallationSteps_Step_GithubChart
	//	*InstallationSteps_Step_HelmArchive
	//	*InstallationSteps_Step_ManifestsArchive
	Step                 isInstallationSteps_Step_Step `protobuf_oneof:"step"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *InstallationSteps_Step) Reset()         { *m = InstallationSteps_Step{} }
func (m *InstallationSteps_Step) String() string { return proto.CompactTextString(m) }
func (*InstallationSteps_Step) ProtoMessage()    {}
func (*InstallationSteps_Step) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{3, 0}
}
func (m *InstallationSteps_Step) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstallationSteps_Step.Unmarshal(m, b)
}
func (m *InstallationSteps_Step) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstallationSteps_Step.Marshal(b, m, deterministic)
}
func (m *InstallationSteps_Step) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallationSteps_Step.Merge(m, src)
}
func (m *InstallationSteps_Step) XXX_Size() int {
	return xxx_messageInfo_InstallationSteps_Step.Size(m)
}
func (m *InstallationSteps_Step) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallationSteps_Step.DiscardUnknown(m)
}

var xxx_messageInfo_InstallationSteps_Step proto.InternalMessageInfo

type isInstallationSteps_Step_Step interface {
	isInstallationSteps_Step_Step()
	Equal(interface{}) bool
}

type InstallationSteps_Step_GithubChart struct {
	GithubChart *GithubRepositoryLocation `protobuf:"bytes,1,opt,name=github_chart,json=githubChart,proto3,oneof"`
}
type InstallationSteps_Step_HelmArchive struct {
	HelmArchive *TgzLocation `protobuf:"bytes,2,opt,name=helm_archive,json=helmArchive,proto3,oneof"`
}
type InstallationSteps_Step_ManifestsArchive struct {
	ManifestsArchive *TgzLocation `protobuf:"bytes,3,opt,name=manifests_archive,json=manifestsArchive,proto3,oneof"`
}

func (*InstallationSteps_Step_GithubChart) isInstallationSteps_Step_Step()      {}
func (*InstallationSteps_Step_HelmArchive) isInstallationSteps_Step_Step()      {}
func (*InstallationSteps_Step_ManifestsArchive) isInstallationSteps_Step_Step() {}

func (m *InstallationSteps_Step) GetStep() isInstallationSteps_Step_Step {
	if m != nil {
		return m.Step
	}
	return nil
}

func (m *InstallationSteps_Step) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InstallationSteps_Step) GetGithubChart() *GithubRepositoryLocation {
	if x, ok := m.GetStep().(*InstallationSteps_Step_GithubChart); ok {
		return x.GithubChart
	}
	return nil
}

func (m *InstallationSteps_Step) GetHelmArchive() *TgzLocation {
	if x, ok := m.GetStep().(*InstallationSteps_Step_HelmArchive); ok {
		return x.HelmArchive
	}
	return nil
}

func (m *InstallationSteps_Step) GetManifestsArchive() *TgzLocation {
	if x, ok := m.GetStep().(*InstallationSteps_Step_ManifestsArchive); ok {
		return x.ManifestsArchive
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*InstallationSteps_Step) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _InstallationSteps_Step_OneofMarshaler, _InstallationSteps_Step_OneofUnmarshaler, _InstallationSteps_Step_OneofSizer, []interface{}{
		(*InstallationSteps_Step_GithubChart)(nil),
		(*InstallationSteps_Step_HelmArchive)(nil),
		(*InstallationSteps_Step_ManifestsArchive)(nil),
	}
}

func _InstallationSteps_Step_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*InstallationSteps_Step)
	// step
	switch x := m.Step.(type) {
	case *InstallationSteps_Step_GithubChart:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GithubChart); err != nil {
			return err
		}
	case *InstallationSteps_Step_HelmArchive:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HelmArchive); err != nil {
			return err
		}
	case *InstallationSteps_Step_ManifestsArchive:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ManifestsArchive); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("InstallationSteps_Step.Step has unexpected type %T", x)
	}
	return nil
}

func _InstallationSteps_Step_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*InstallationSteps_Step)
	switch tag {
	case 1: // step.github_chart
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GithubRepositoryLocation)
		err := b.DecodeMessage(msg)
		m.Step = &InstallationSteps_Step_GithubChart{msg}
		return true, err
	case 2: // step.helm_archive
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TgzLocation)
		err := b.DecodeMessage(msg)
		m.Step = &InstallationSteps_Step_HelmArchive{msg}
		return true, err
	case 3: // step.manifests_archive
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TgzLocation)
		err := b.DecodeMessage(msg)
		m.Step = &InstallationSteps_Step_ManifestsArchive{msg}
		return true, err
	default:
		return false, nil
	}
}

func _InstallationSteps_Step_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*InstallationSteps_Step)
	// step
	switch x := m.Step.(type) {
	case *InstallationSteps_Step_GithubChart:
		s := proto.Size(x.GithubChart)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InstallationSteps_Step_HelmArchive:
		s := proto.Size(x.HelmArchive)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InstallationSteps_Step_ManifestsArchive:
		s := proto.Size(x.ManifestsArchive)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// A flavor represents a particular variant of an extension.
type Flavor struct {
	// Identifier of the flavor
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// This field should contain a clear description of what this flavor is intended to accomplish.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Optional customizations that are to be applied to the installation manifest.
	CustomizationLayers []*Layer `protobuf:"bytes,3,rep,name=customization_layers,json=customizationLayers,proto3" json:"customization_layers,omitempty"`
	// The flavor is considered applicable if any of the specified requirement sets is satisfied.
	RequirementSets []*RequirementSet `protobuf:"bytes,4,rep,name=requirement_sets,json=requirementSets,proto3" json:"requirement_sets,omitempty"`
	// Optional set of parameters to be used during installation.
	Parameters           []*Parameter `protobuf:"bytes,5,rep,name=parameters,proto3" json:"parameters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Flavor) Reset()         { *m = Flavor{} }
func (m *Flavor) String() string { return proto.CompactTextString(m) }
func (*Flavor) ProtoMessage()    {}
func (*Flavor) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{4}
}
func (m *Flavor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Flavor.Unmarshal(m, b)
}
func (m *Flavor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Flavor.Marshal(b, m, deterministic)
}
func (m *Flavor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flavor.Merge(m, src)
}
func (m *Flavor) XXX_Size() int {
	return xxx_messageInfo_Flavor.Size(m)
}
func (m *Flavor) XXX_DiscardUnknown() {
	xxx_messageInfo_Flavor.DiscardUnknown(m)
}

var xxx_messageInfo_Flavor proto.InternalMessageInfo

func (m *Flavor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Flavor) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Flavor) GetCustomizationLayers() []*Layer {
	if m != nil {
		return m.CustomizationLayers
	}
	return nil
}

func (m *Flavor) GetRequirementSets() []*RequirementSet {
	if m != nil {
		return m.RequirementSets
	}
	return nil
}

func (m *Flavor) GetParameters() []*Parameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

// Parameters represent values that are used to configure the installation of an extension.
type Parameter struct {
	// Identifier of the parameter
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Description of what the effects of the parameter are.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Value of the parameter
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// Default value of the parameter
	Default string `protobuf:"bytes,4,opt,name=default,proto3" json:"default,omitempty"`
	// Indicates whether a value for the parameter is required for the installation of the extension to be performed.
	Required             bool     `protobuf:"varint,5,opt,name=required,proto3" json:"required,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Parameter) Reset()         { *m = Parameter{} }
func (m *Parameter) String() string { return proto.CompactTextString(m) }
func (*Parameter) ProtoMessage()    {}
func (*Parameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{5}
}
func (m *Parameter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Parameter.Unmarshal(m, b)
}
func (m *Parameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Parameter.Marshal(b, m, deterministic)
}
func (m *Parameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Parameter.Merge(m, src)
}
func (m *Parameter) XXX_Size() int {
	return xxx_messageInfo_Parameter.Size(m)
}
func (m *Parameter) XXX_DiscardUnknown() {
	xxx_messageInfo_Parameter.DiscardUnknown(m)
}

var xxx_messageInfo_Parameter proto.InternalMessageInfo

func (m *Parameter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Parameter) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Parameter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Parameter) GetDefault() string {
	if m != nil {
		return m.Default
	}
	return ""
}

func (m *Parameter) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

// A layer represent optional processing steps that can be executed to apply mesh-specific transformations to
// the rendered extension installation manifest.
type Layer struct {
	// The actual implementation of the layer
	//
	// Types that are valid to be assigned to Type:
	//	*Layer_Kustomize
	Type                 isLayer_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Layer) Reset()         { *m = Layer{} }
func (m *Layer) String() string { return proto.CompactTextString(m) }
func (*Layer) ProtoMessage()    {}
func (*Layer) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{6}
}
func (m *Layer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Layer.Unmarshal(m, b)
}
func (m *Layer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Layer.Marshal(b, m, deterministic)
}
func (m *Layer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Layer.Merge(m, src)
}
func (m *Layer) XXX_Size() int {
	return xxx_messageInfo_Layer.Size(m)
}
func (m *Layer) XXX_DiscardUnknown() {
	xxx_messageInfo_Layer.DiscardUnknown(m)
}

var xxx_messageInfo_Layer proto.InternalMessageInfo

type isLayer_Type interface {
	isLayer_Type()
	Equal(interface{}) bool
}

type Layer_Kustomize struct {
	Kustomize *Kustomize `protobuf:"bytes,1,opt,name=kustomize,proto3,oneof"`
}

func (*Layer_Kustomize) isLayer_Type() {}

func (m *Layer) GetType() isLayer_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Layer) GetKustomize() *Kustomize {
	if x, ok := m.GetType().(*Layer_Kustomize); ok {
		return x.Kustomize
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Layer) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Layer_OneofMarshaler, _Layer_OneofUnmarshaler, _Layer_OneofSizer, []interface{}{
		(*Layer_Kustomize)(nil),
	}
}

func _Layer_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Layer)
	// type
	switch x := m.Type.(type) {
	case *Layer_Kustomize:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Kustomize); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Layer.Type has unexpected type %T", x)
	}
	return nil
}

func _Layer_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Layer)
	switch tag {
	case 1: // type.kustomize
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Kustomize)
		err := b.DecodeMessage(msg)
		m.Type = &Layer_Kustomize{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Layer_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Layer)
	// type
	switch x := m.Type.(type) {
	case *Layer_Kustomize:
		s := proto.Size(x.Kustomize)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Represents a layer implemented via [kustomize](https://github.com/kubernetes-sigs/kustomize)
type Kustomize struct {
	// Location of the root of the kustomize directory structure
	//
	// Types that are valid to be assigned to Location:
	//	*Kustomize_Github
	//	*Kustomize_TgzArchive
	Location isKustomize_Location `protobuf_oneof:"location"`
	// Path to the overlay overlay that will be applied to the base (the rendered installation manifest).
	OverlayPath          string   `protobuf:"bytes,3,opt,name=overlay_path,json=overlayPath,proto3" json:"overlay_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Kustomize) Reset()         { *m = Kustomize{} }
func (m *Kustomize) String() string { return proto.CompactTextString(m) }
func (*Kustomize) ProtoMessage()    {}
func (*Kustomize) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{7}
}
func (m *Kustomize) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Kustomize.Unmarshal(m, b)
}
func (m *Kustomize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Kustomize.Marshal(b, m, deterministic)
}
func (m *Kustomize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Kustomize.Merge(m, src)
}
func (m *Kustomize) XXX_Size() int {
	return xxx_messageInfo_Kustomize.Size(m)
}
func (m *Kustomize) XXX_DiscardUnknown() {
	xxx_messageInfo_Kustomize.DiscardUnknown(m)
}

var xxx_messageInfo_Kustomize proto.InternalMessageInfo

type isKustomize_Location interface {
	isKustomize_Location()
	Equal(interface{}) bool
}

type Kustomize_Github struct {
	Github *GithubRepositoryLocation `protobuf:"bytes,1,opt,name=github,proto3,oneof"`
}
type Kustomize_TgzArchive struct {
	TgzArchive *TgzLocation `protobuf:"bytes,2,opt,name=tgz_archive,json=tgzArchive,proto3,oneof"`
}

func (*Kustomize_Github) isKustomize_Location()     {}
func (*Kustomize_TgzArchive) isKustomize_Location() {}

func (m *Kustomize) GetLocation() isKustomize_Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Kustomize) GetGithub() *GithubRepositoryLocation {
	if x, ok := m.GetLocation().(*Kustomize_Github); ok {
		return x.Github
	}
	return nil
}

func (m *Kustomize) GetTgzArchive() *TgzLocation {
	if x, ok := m.GetLocation().(*Kustomize_TgzArchive); ok {
		return x.TgzArchive
	}
	return nil
}

func (m *Kustomize) GetOverlayPath() string {
	if m != nil {
		return m.OverlayPath
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Kustomize) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Kustomize_OneofMarshaler, _Kustomize_OneofUnmarshaler, _Kustomize_OneofSizer, []interface{}{
		(*Kustomize_Github)(nil),
		(*Kustomize_TgzArchive)(nil),
	}
}

func _Kustomize_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Kustomize)
	// location
	switch x := m.Location.(type) {
	case *Kustomize_Github:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Github); err != nil {
			return err
		}
	case *Kustomize_TgzArchive:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TgzArchive); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Kustomize.Location has unexpected type %T", x)
	}
	return nil
}

func _Kustomize_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Kustomize)
	switch tag {
	case 1: // location.github
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GithubRepositoryLocation)
		err := b.DecodeMessage(msg)
		m.Location = &Kustomize_Github{msg}
		return true, err
	case 2: // location.tgz_archive
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TgzLocation)
		err := b.DecodeMessage(msg)
		m.Location = &Kustomize_TgzArchive{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Kustomize_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Kustomize)
	// location
	switch x := m.Location.(type) {
	case *Kustomize_Github:
		s := proto.Size(x.Github)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Kustomize_TgzArchive:
		s := proto.Size(x.TgzArchive)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Wraps a collection of FlavorCompatibilityInfo
type FlavorCompatibility struct {
	CompatiblePairs      []*CompatibleFlavorMeshPair `protobuf:"bytes,1,rep,name=compatible_pairs,json=compatiblePairs,proto3" json:"compatible_pairs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *FlavorCompatibility) Reset()         { *m = FlavorCompatibility{} }
func (m *FlavorCompatibility) String() string { return proto.CompactTextString(m) }
func (*FlavorCompatibility) ProtoMessage()    {}
func (*FlavorCompatibility) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{8}
}
func (m *FlavorCompatibility) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlavorCompatibility.Unmarshal(m, b)
}
func (m *FlavorCompatibility) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlavorCompatibility.Marshal(b, m, deterministic)
}
func (m *FlavorCompatibility) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlavorCompatibility.Merge(m, src)
}
func (m *FlavorCompatibility) XXX_Size() int {
	return xxx_messageInfo_FlavorCompatibility.Size(m)
}
func (m *FlavorCompatibility) XXX_DiscardUnknown() {
	xxx_messageInfo_FlavorCompatibility.DiscardUnknown(m)
}

var xxx_messageInfo_FlavorCompatibility proto.InternalMessageInfo

func (m *FlavorCompatibility) GetCompatiblePairs() []*CompatibleFlavorMeshPair {
	if m != nil {
		return m.CompatiblePairs
	}
	return nil
}

// Represents a Flavor and a Mesh instance that are compatible with one another.
type CompatibleFlavorMeshPair struct {
	Flavor               *Flavor           `protobuf:"bytes,1,opt,name=flavor,proto3" json:"flavor,omitempty"`
	Mesh                 *core.ResourceRef `protobuf:"bytes,2,opt,name=mesh,proto3" json:"mesh,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CompatibleFlavorMeshPair) Reset()         { *m = CompatibleFlavorMeshPair{} }
func (m *CompatibleFlavorMeshPair) String() string { return proto.CompactTextString(m) }
func (*CompatibleFlavorMeshPair) ProtoMessage()    {}
func (*CompatibleFlavorMeshPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{9}
}
func (m *CompatibleFlavorMeshPair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompatibleFlavorMeshPair.Unmarshal(m, b)
}
func (m *CompatibleFlavorMeshPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompatibleFlavorMeshPair.Marshal(b, m, deterministic)
}
func (m *CompatibleFlavorMeshPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompatibleFlavorMeshPair.Merge(m, src)
}
func (m *CompatibleFlavorMeshPair) XXX_Size() int {
	return xxx_messageInfo_CompatibleFlavorMeshPair.Size(m)
}
func (m *CompatibleFlavorMeshPair) XXX_DiscardUnknown() {
	xxx_messageInfo_CompatibleFlavorMeshPair.DiscardUnknown(m)
}

var xxx_messageInfo_CompatibleFlavorMeshPair proto.InternalMessageInfo

func (m *CompatibleFlavorMeshPair) GetFlavor() *Flavor {
	if m != nil {
		return m.Flavor
	}
	return nil
}

func (m *CompatibleFlavorMeshPair) GetMesh() *core.ResourceRef {
	if m != nil {
		return m.Mesh
	}
	return nil
}

// Represents a set of requirements that all need to be satisfied.
type RequirementSet struct {
	MeshRequirement      *MeshRequirement `protobuf:"bytes,1,opt,name=mesh_requirement,json=meshRequirement,proto3" json:"mesh_requirement,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RequirementSet) Reset()         { *m = RequirementSet{} }
func (m *RequirementSet) String() string { return proto.CompactTextString(m) }
func (*RequirementSet) ProtoMessage()    {}
func (*RequirementSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{10}
}
func (m *RequirementSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequirementSet.Unmarshal(m, b)
}
func (m *RequirementSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequirementSet.Marshal(b, m, deterministic)
}
func (m *RequirementSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequirementSet.Merge(m, src)
}
func (m *RequirementSet) XXX_Size() int {
	return xxx_messageInfo_RequirementSet.Size(m)
}
func (m *RequirementSet) XXX_DiscardUnknown() {
	xxx_messageInfo_RequirementSet.DiscardUnknown(m)
}

var xxx_messageInfo_RequirementSet proto.InternalMessageInfo

func (m *RequirementSet) GetMeshRequirement() *MeshRequirement {
	if m != nil {
		return m.MeshRequirement
	}
	return nil
}

// Represents the requirement for a mesh to be installed.
type MeshRequirement struct {
	// Type of mesh
	MeshType MeshType `protobuf:"varint,1,opt,name=mesh_type,json=meshType,proto3,enum=hub.solo.io.MeshType" json:"mesh_type,omitempty"`
	// Range of allowed versions. If empty, any version is allowed.
	Versions             *AllowedVersions `protobuf:"bytes,2,opt,name=versions,proto3" json:"versions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MeshRequirement) Reset()         { *m = MeshRequirement{} }
func (m *MeshRequirement) String() string { return proto.CompactTextString(m) }
func (*MeshRequirement) ProtoMessage()    {}
func (*MeshRequirement) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{11}
}
func (m *MeshRequirement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshRequirement.Unmarshal(m, b)
}
func (m *MeshRequirement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshRequirement.Marshal(b, m, deterministic)
}
func (m *MeshRequirement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshRequirement.Merge(m, src)
}
func (m *MeshRequirement) XXX_Size() int {
	return xxx_messageInfo_MeshRequirement.Size(m)
}
func (m *MeshRequirement) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshRequirement.DiscardUnknown(m)
}

var xxx_messageInfo_MeshRequirement proto.InternalMessageInfo

func (m *MeshRequirement) GetMeshType() MeshType {
	if m != nil {
		return m.MeshType
	}
	return MeshType_ISTIO
}

func (m *MeshRequirement) GetVersions() *AllowedVersions {
	if m != nil {
		return m.Versions
	}
	return nil
}

// A directory inside of a github repo
type GithubRepositoryLocation struct {
	Org                  string   `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`
	Repo                 string   `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"`
	Ref                  string   `protobuf:"bytes,3,opt,name=ref,proto3" json:"ref,omitempty"`
	Directory            string   `protobuf:"bytes,4,opt,name=directory,proto3" json:"directory,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GithubRepositoryLocation) Reset()         { *m = GithubRepositoryLocation{} }
func (m *GithubRepositoryLocation) String() string { return proto.CompactTextString(m) }
func (*GithubRepositoryLocation) ProtoMessage()    {}
func (*GithubRepositoryLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{12}
}
func (m *GithubRepositoryLocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GithubRepositoryLocation.Unmarshal(m, b)
}
func (m *GithubRepositoryLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GithubRepositoryLocation.Marshal(b, m, deterministic)
}
func (m *GithubRepositoryLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GithubRepositoryLocation.Merge(m, src)
}
func (m *GithubRepositoryLocation) XXX_Size() int {
	return xxx_messageInfo_GithubRepositoryLocation.Size(m)
}
func (m *GithubRepositoryLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_GithubRepositoryLocation.DiscardUnknown(m)
}

var xxx_messageInfo_GithubRepositoryLocation proto.InternalMessageInfo

func (m *GithubRepositoryLocation) GetOrg() string {
	if m != nil {
		return m.Org
	}
	return ""
}

func (m *GithubRepositoryLocation) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *GithubRepositoryLocation) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *GithubRepositoryLocation) GetDirectory() string {
	if m != nil {
		return m.Directory
	}
	return ""
}

// Location of a gzipped tar file
type TgzLocation struct {
	Uri                  string   `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TgzLocation) Reset()         { *m = TgzLocation{} }
func (m *TgzLocation) String() string { return proto.CompactTextString(m) }
func (*TgzLocation) ProtoMessage()    {}
func (*TgzLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{13}
}
func (m *TgzLocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TgzLocation.Unmarshal(m, b)
}
func (m *TgzLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TgzLocation.Marshal(b, m, deterministic)
}
func (m *TgzLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TgzLocation.Merge(m, src)
}
func (m *TgzLocation) XXX_Size() int {
	return xxx_messageInfo_TgzLocation.Size(m)
}
func (m *TgzLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_TgzLocation.DiscardUnknown(m)
}

var xxx_messageInfo_TgzLocation proto.InternalMessageInfo

func (m *TgzLocation) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

type AllowedVersions struct {
	MinVersion           string   `protobuf:"bytes,2,opt,name=min_version,json=minVersion,proto3" json:"min_version,omitempty"`
	MaxVersion           string   `protobuf:"bytes,3,opt,name=max_version,json=maxVersion,proto3" json:"max_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllowedVersions) Reset()         { *m = AllowedVersions{} }
func (m *AllowedVersions) String() string { return proto.CompactTextString(m) }
func (*AllowedVersions) ProtoMessage()    {}
func (*AllowedVersions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{14}
}
func (m *AllowedVersions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllowedVersions.Unmarshal(m, b)
}
func (m *AllowedVersions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllowedVersions.Marshal(b, m, deterministic)
}
func (m *AllowedVersions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllowedVersions.Merge(m, src)
}
func (m *AllowedVersions) XXX_Size() int {
	return xxx_messageInfo_AllowedVersions.Size(m)
}
func (m *AllowedVersions) XXX_DiscardUnknown() {
	xxx_messageInfo_AllowedVersions.DiscardUnknown(m)
}

var xxx_messageInfo_AllowedVersions proto.InternalMessageInfo

func (m *AllowedVersions) GetMinVersion() string {
	if m != nil {
		return m.MinVersion
	}
	return ""
}

func (m *AllowedVersions) GetMaxVersion() string {
	if m != nil {
		return m.MaxVersion
	}
	return ""
}

func init() {
	proto.RegisterEnum("hub.solo.io.ApplicationType", ApplicationType_name, ApplicationType_value)
	proto.RegisterEnum("hub.solo.io.MeshType", MeshType_name, MeshType_value)
	proto.RegisterType((*ApplicationSpec)(nil), "hub.solo.io.ApplicationSpec")
	proto.RegisterType((*ApplicationSpecs)(nil), "hub.solo.io.ApplicationSpecs")
	proto.RegisterType((*VersionedApplicationSpec)(nil), "hub.solo.io.VersionedApplicationSpec")
	proto.RegisterMapType((map[string]string)(nil), "hub.solo.io.VersionedApplicationSpec.RequiredLabelsEntry")
	proto.RegisterType((*InstallationSteps)(nil), "hub.solo.io.InstallationSteps")
	proto.RegisterType((*InstallationSteps_Step)(nil), "hub.solo.io.InstallationSteps.Step")
	proto.RegisterType((*Flavor)(nil), "hub.solo.io.Flavor")
	proto.RegisterType((*Parameter)(nil), "hub.solo.io.Parameter")
	proto.RegisterType((*Layer)(nil), "hub.solo.io.Layer")
	proto.RegisterType((*Kustomize)(nil), "hub.solo.io.Kustomize")
	proto.RegisterType((*FlavorCompatibility)(nil), "hub.solo.io.FlavorCompatibility")
	proto.RegisterType((*CompatibleFlavorMeshPair)(nil), "hub.solo.io.CompatibleFlavorMeshPair")
	proto.RegisterType((*RequirementSet)(nil), "hub.solo.io.RequirementSet")
	proto.RegisterType((*MeshRequirement)(nil), "hub.solo.io.MeshRequirement")
	proto.RegisterType((*GithubRepositoryLocation)(nil), "hub.solo.io.GithubRepositoryLocation")
	proto.RegisterType((*TgzLocation)(nil), "hub.solo.io.TgzLocation")
	proto.RegisterType((*AllowedVersions)(nil), "hub.solo.io.AllowedVersions")
}

func init() { proto.RegisterFile("api/v1/registry.proto", fileDescriptor_d1ad3a89626d72ea) }

var fileDescriptor_d1ad3a89626d72ea = []byte{
	// 1337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcf, 0x6f, 0xdb, 0x36,
	0x14, 0x8e, 0x1c, 0x3b, 0xb1, 0x9f, 0x93, 0x58, 0x61, 0xd2, 0x42, 0xcd, 0x8a, 0x26, 0xd3, 0x50,
	0x20, 0x6b, 0x57, 0x7b, 0xcd, 0xba, 0xa2, 0xdd, 0x30, 0x0c, 0x49, 0x9a, 0x26, 0x59, 0x93, 0xc6,
	0x90, 0xb3, 0x1f, 0xdd, 0x45, 0x60, 0x64, 0x46, 0x26, 0x2a, 0x99, 0x1a, 0x49, 0x7b, 0x75, 0x2e,
	0x3b, 0xed, 0x38, 0x60, 0x7f, 0xc6, 0x4e, 0x3b, 0xef, 0xba, 0xd3, 0xfe, 0x8c, 0x01, 0xfb, 0x23,
	0x76, 0x1e, 0x48, 0x4a, 0x8a, 0x94, 0x36, 0x5b, 0x3b, 0xf4, 0x62, 0x93, 0xef, 0x7d, 0xdf, 0x47,
	0xf2, 0xf1, 0x13, 0x49, 0xb8, 0x82, 0x13, 0xda, 0x19, 0xdf, 0xed, 0x70, 0x12, 0x52, 0x21, 0xf9,
	0xa4, 0x9d, 0x70, 0x26, 0x19, 0x6a, 0x0e, 0x46, 0x27, 0x6d, 0xc1, 0x22, 0xd6, 0xa6, 0x6c, 0x65,
	0x39, 0x64, 0x21, 0xd3, 0xf1, 0x8e, 0x6a, 0x19, 0xc8, 0xca, 0x6a, 0xc8, 0x58, 0x18, 0x91, 0x8e,
	0xee, 0x9d, 0x8c, 0x4e, 0x3b, 0x92, 0xc6, 0x44, 0x48, 0x1c, 0x27, 0x29, 0xe0, 0x83, 0x90, 0x4a,
	0x25, 0x13, 0xb0, 0xb8, 0xa3, 0xa4, 0xee, 0x50, 0x66, 0xfe, 0x9f, 0x53, 0xd9, 0xc9, 0x87, 0x3d,
	0x35, 0x68, 0xf7, 0xf7, 0x2a, 0xb4, 0x36, 0x93, 0x24, 0xa2, 0x01, 0x96, 0x94, 0x0d, 0x7b, 0x09,
	0x09, 0xd0, 0x87, 0x50, 0x95, 0x93, 0x84, 0x38, 0xd6, 0x9a, 0xb5, 0xbe, 0xb0, 0x71, 0xbd, 0x5d,
	0x98, 0x54, 0xbb, 0x80, 0x3d, 0x9e, 0x24, 0xc4, 0xd3, 0x48, 0x84, 0xa0, 0x3a, 0xc4, 0x31, 0x71,
	0x2a, 0x6b, 0xd6, 0x7a, 0xc3, 0xd3, 0x6d, 0x74, 0x0d, 0xea, 0x11, 0x0b, 0x99, 0x3f, 0xe2, 0x91,
	0x33, 0xad, 0xe3, 0xb3, 0xaa, 0xff, 0x25, 0x8f, 0xd0, 0x6d, 0x58, 0x14, 0x03, 0xc6, 0xa5, 0xdf,
	0x27, 0x22, 0xe0, 0x34, 0x51, 0x6a, 0x4e, 0x55, 0x63, 0x6c, 0x9d, 0x78, 0x74, 0x1e, 0x47, 0xef,
	0x83, 0x1d, 0xb1, 0x61, 0x58, 0xc2, 0xd6, 0x34, 0xb6, 0xa5, 0xe2, 0x45, 0xe8, 0x6d, 0x58, 0xec,
	0xb3, 0x60, 0x14, 0x93, 0xa1, 0xd4, 0x33, 0xd4, 0x63, 0xcf, 0x18, 0xdd, 0x52, 0x42, 0x4d, 0xe2,
	0x26, 0x2c, 0x70, 0x92, 0x30, 0x41, 0x25, 0xe3, 0x13, 0x8d, 0x9c, 0xd5, 0xc8, 0xf9, 0xf3, 0xa8,
	0x82, 0x75, 0x60, 0x09, 0x9f, 0xaf, 0xd9, 0x0f, 0x38, 0xc1, 0x92, 0x71, 0xa7, 0xae, 0xb1, 0xa8,
	0x90, 0xda, 0x36, 0x19, 0x74, 0x17, 0x96, 0x8b, 0x84, 0x84, 0xb3, 0x31, 0xed, 0x13, 0xee, 0x34,
	0x34, 0xa3, 0x28, 0xd6, 0x4d, 0x53, 0xe8, 0x63, 0xb8, 0x5a, 0xa4, 0xc4, 0x98, 0x0e, 0x25, 0xa6,
	0x43, 0xc2, 0x1d, 0xd0, 0xa4, 0x2b, 0x85, 0xec, 0x61, 0x9e, 0x44, 0xdb, 0x30, 0xd7, 0xc7, 0x92,
	0x98, 0x39, 0x91, 0xbe, 0xd3, 0x5c, 0xb3, 0xd6, 0x9b, 0x1b, 0x2b, 0x6d, 0xe3, 0x90, 0x76, 0xe6,
	0x90, 0xf6, 0x71, 0xe6, 0x90, 0xad, 0xea, 0xcf, 0x7f, 0xae, 0x5a, 0x5e, 0x53, 0xb1, 0xb6, 0x0d,
	0x09, 0x6d, 0x42, 0x7d, 0x4c, 0xb8, 0xa0, 0x6c, 0x28, 0x9c, 0xb9, 0xb5, 0xe9, 0xf5, 0xe6, 0xc6,
	0xcd, 0xd2, 0x86, 0x7f, 0x65, 0x92, 0xa4, 0x7f, 0xc1, 0x25, 0x5e, 0x4e, 0x73, 0x1f, 0x83, 0x7d,
	0x21, 0x29, 0xd0, 0x06, 0xd4, 0x84, 0x6a, 0x38, 0x96, 0xd6, 0xbc, 0xd4, 0x44, 0x5a, 0xca, 0x40,
	0xdd, 0x5f, 0x6b, 0xe0, 0x5c, 0x36, 0x1c, 0x72, 0x60, 0x36, 0x1d, 0x50, 0xfb, 0xb2, 0xe1, 0x65,
	0x5d, 0xb4, 0x0b, 0x0b, 0xba, 0x0c, 0xc9, 0xe8, 0x24, 0xa2, 0x62, 0x40, 0xfa, 0xda, 0x86, 0xaf,
	0x53, 0x88, 0x79, 0xc5, 0xeb, 0x66, 0x34, 0xf4, 0x05, 0xcc, 0x99, 0x6f, 0xc7, 0x0f, 0x06, 0x98,
	0x4b, 0x67, 0x5e, 0xcb, 0x94, 0xcb, 0xb1, 0xab, 0x01, 0x5e, 0x6e, 0x91, 0x03, 0x66, 0xe6, 0xb8,
	0x37, 0xe5, 0x35, 0x0d, 0x79, 0x5b, 0x71, 0xd1, 0x67, 0x30, 0x37, 0x20, 0x51, 0xec, 0x63, 0x1e,
	0x0c, 0xe8, 0x98, 0x38, 0x0b, 0x5a, 0xcb, 0x29, 0x69, 0x1d, 0x87, 0x67, 0x45, 0xba, 0xc2, 0x6f,
	0x1a, 0x38, 0xda, 0x85, 0xc5, 0x18, 0x0f, 0xe9, 0x29, 0x11, 0x52, 0xe4, 0x1a, 0xad, 0xff, 0xd4,
	0xb0, 0x73, 0x52, 0x26, 0x74, 0x04, 0x88, 0x0e, 0x85, 0xc4, 0x51, 0x64, 0xbc, 0x25, 0x24, 0x49,
	0x84, 0x63, 0x6b, 0xa5, 0x1b, 0x25, 0xa5, 0xfd, 0x02, 0xac, 0xa7, 0x50, 0x7b, 0x53, 0xde, 0x22,
	0xbd, 0x18, 0x44, 0xab, 0xd0, 0x1c, 0xe3, 0x68, 0x44, 0x84, 0x3f, 0xc1, 0x71, 0xe4, 0xdc, 0xd0,
	0x7b, 0x01, 0x26, 0xf4, 0x0c, 0xc7, 0x11, 0x3a, 0x81, 0x16, 0x27, 0xdf, 0x8d, 0x28, 0x27, 0x7d,
	0x3f, 0xc2, 0x27, 0x24, 0x12, 0xce, 0xaa, 0xf6, 0xc0, 0xc3, 0xd7, 0xf2, 0x55, 0xdb, 0x4b, 0xc9,
	0x07, 0x9a, 0xbb, 0x33, 0x94, 0x7c, 0xe2, 0x2d, 0xf0, 0x52, 0x10, 0xdd, 0x81, 0xd9, 0xd3, 0x08,
	0x8f, 0x19, 0x17, 0xce, 0xba, 0xd6, 0x5e, 0x2a, 0x69, 0x3f, 0xd6, 0x39, 0x2f, 0xc3, 0xac, 0x6c,
	0xc2, 0xd2, 0x2b, 0x54, 0x91, 0x0d, 0xd3, 0xcf, 0xc9, 0x24, 0xb5, 0x93, 0x6a, 0xa2, 0x65, 0xa8,
	0xe9, 0x95, 0xa4, 0x07, 0x99, 0xe9, 0x7c, 0x52, 0x79, 0x60, 0x6d, 0x2d, 0xc1, 0x62, 0xb9, 0x8e,
	0x09, 0x09, 0xdc, 0x3f, 0x2a, 0xb0, 0xf8, 0x52, 0xd9, 0xd0, 0x43, 0xa8, 0x99, 0x2a, 0x1b, 0xeb,
	0xbf, 0xf7, 0xef, 0x55, 0x6e, 0xab, 0x5f, 0xcf, 0x30, 0x56, 0xfe, 0xb6, 0xa0, 0xaa, 0xfa, 0xf9,
	0x81, 0x5a, 0x2d, 0x1c, 0xa8, 0x17, 0xed, 0x69, 0xbd, 0x45, 0x7b, 0x56, 0xde, 0x82, 0x3d, 0xa7,
	0xdf, 0xdc, 0x9e, 0x5b, 0x33, 0x50, 0x55, 0x2b, 0x77, 0x7f, 0xac, 0xc0, 0x8c, 0xd9, 0xb5, 0x7c,
	0xe9, 0x56, 0x61, 0xe9, 0x6b, 0xd0, 0x2c, 0x1e, 0xff, 0x66, 0x77, 0x8a, 0x21, 0xb4, 0x03, 0xcb,
	0xc1, 0x48, 0x48, 0x16, 0xd3, 0x33, 0xb3, 0x41, 0x11, 0x9e, 0x10, 0x2e, 0x9c, 0x69, 0xbd, 0x07,
	0xa8, 0x34, 0xa9, 0x03, 0x95, 0xf2, 0x96, 0x4a, 0x78, 0x1d, 0x13, 0xe8, 0x31, 0xd8, 0xa9, 0xd5,
	0xd4, 0x5d, 0xe1, 0x0b, 0x22, 0x85, 0x53, 0xd5, 0x12, 0xef, 0x94, 0x24, 0xbc, 0x73, 0x50, 0x8f,
	0x48, 0xaf, 0xc5, 0x4b, 0x7d, 0x81, 0xee, 0x03, 0x24, 0x98, 0xe3, 0x98, 0x48, 0x35, 0x89, 0x9a,
	0x56, 0xb8, 0x5a, 0x52, 0xe8, 0x66, 0x69, 0xaf, 0x80, 0x74, 0x7f, 0xb2, 0xa0, 0x91, 0x67, 0xfe,
	0x67, 0x29, 0x72, 0x13, 0x4f, 0x17, 0x4c, 0xac, 0xce, 0xcf, 0x3e, 0x39, 0xc5, 0xa3, 0x48, 0xa6,
	0xa6, 0xca, 0xba, 0x68, 0x05, 0xea, 0xd9, 0xe7, 0xa5, 0x2f, 0xd6, 0xba, 0x97, 0xf7, 0xdd, 0x5d,
	0xa8, 0xe9, 0xca, 0xa0, 0xfb, 0xd0, 0x78, 0x9e, 0xd6, 0x8b, 0xa4, 0xce, 0x2b, 0xaf, 0xe7, 0x49,
	0x96, 0xdd, 0x9b, 0xf2, 0xce, 0xa1, 0x6a, 0x83, 0xd5, 0x0b, 0xc1, 0xfd, 0xcd, 0x82, 0x46, 0x0e,
	0x41, 0x9f, 0xc3, 0x8c, 0x71, 0xe3, 0x9b, 0x9a, 0x38, 0xa5, 0xa1, 0x4f, 0xa1, 0x29, 0xc3, 0xb3,
	0x37, 0xb0, 0x2f, 0xc8, 0xf0, 0x2c, 0x73, 0xef, 0xbb, 0x30, 0xc7, 0xc6, 0x84, 0x47, 0x78, 0xe2,
	0x27, 0x58, 0x0e, 0xd2, 0x3a, 0x35, 0xd3, 0x58, 0x17, 0xcb, 0xc1, 0x16, 0xa8, 0xc7, 0x8b, 0x21,
	0xbb, 0x21, 0x2c, 0x19, 0x6b, 0x6e, 0xb3, 0x38, 0xc1, 0x92, 0x9e, 0xd0, 0x88, 0xca, 0x09, 0xea,
	0x82, 0x1d, 0xa4, 0x81, 0x88, 0xf8, 0x09, 0xa6, 0x3c, 0xfb, 0xe2, 0xcb, 0xab, 0xd9, 0xce, 0x41,
	0x46, 0xe5, 0x90, 0x88, 0x41, 0x17, 0x53, 0xee, 0xb5, 0xce, 0xe9, 0xaa, 0x2f, 0xdc, 0x31, 0x38,
	0x97, 0x81, 0xd1, 0x6d, 0x98, 0x31, 0xa7, 0x59, 0x5a, 0xb1, 0x57, 0x1e, 0x78, 0x29, 0x04, 0xdd,
	0x81, 0x6a, 0x4c, 0xc4, 0x20, 0x2d, 0xcb, 0xb5, 0x76, 0xc0, 0x38, 0x29, 0x58, 0x57, 0xb0, 0x11,
	0x0f, 0x88, 0x47, 0x4e, 0x3d, 0x0d, 0x73, 0x9f, 0xc1, 0x42, 0xd9, 0xcf, 0x68, 0x17, 0x6c, 0x95,
	0xf1, 0x0b, 0xb6, 0x4e, 0xc7, 0x2d, 0x5f, 0xe4, 0x6a, 0x7a, 0x05, 0xaa, 0xd7, 0x8a, 0xcb, 0x01,
	0xf7, 0x07, 0x68, 0x5d, 0xc0, 0xa0, 0x0d, 0x68, 0x68, 0xed, 0xc2, 0x13, 0xf3, 0xca, 0x4b, 0xa2,
	0xfa, 0x6d, 0x59, 0x8f, 0xd3, 0x16, 0x7a, 0x50, 0x78, 0xa4, 0x54, 0x5e, 0x31, 0x8f, 0xcd, 0x28,
	0x62, 0xdf, 0x93, 0x7e, 0x7a, 0xa7, 0x88, 0xc2, 0xdb, 0x24, 0x01, 0xe7, 0x32, 0x3b, 0xa9, 0xf3,
	0x9f, 0xf1, 0x30, 0x3b, 0xff, 0x19, 0x0f, 0xd5, 0x07, 0xa7, 0x5e, 0x7f, 0xd9, 0x3b, 0x56, 0xb5,
	0x15, 0x8a, 0x93, 0xd3, 0xd4, 0x24, 0xaa, 0x89, 0xae, 0x43, 0xa3, 0x4f, 0x39, 0x09, 0x94, 0x58,
	0xfa, 0x31, 0x9d, 0x07, 0xdc, 0x55, 0x68, 0x16, 0xac, 0xa7, 0xe8, 0x23, 0x4e, 0xb3, 0x41, 0x46,
	0x9c, 0xba, 0x3d, 0x68, 0x5d, 0x98, 0xaf, 0xba, 0x54, 0x63, 0x3a, 0xf4, 0xb3, 0x07, 0x8e, 0x19,
	0x1e, 0x62, 0x3a, 0x4c, 0x11, 0x1a, 0x80, 0x5f, 0xe4, 0x80, 0xe9, 0x14, 0x80, 0x5f, 0xa4, 0x80,
	0x5b, 0xf7, 0x4a, 0xcf, 0x78, 0x5d, 0xb4, 0x79, 0x68, 0xec, 0x7c, 0x73, 0xbc, 0xf3, 0xb4, 0xb7,
	0x7f, 0xf4, 0xd4, 0x9e, 0x42, 0x75, 0xa8, 0x3e, 0xda, 0x39, 0x3c, 0xb2, 0x2d, 0xd5, 0x3a, 0xdc,
	0xe9, 0xed, 0xd9, 0x95, 0x5b, 0xf7, 0xa0, 0x9e, 0x55, 0x1b, 0x35, 0xa0, 0xb6, 0xdf, 0x3b, 0xde,
	0x3f, 0xb2, 0xa7, 0x50, 0x13, 0x66, 0x0f, 0xf6, 0x9f, 0x3e, 0xd9, 0xf1, 0x1e, 0xd9, 0x16, 0xb2,
	0x61, 0x6e, 0xf3, 0xeb, 0x9e, 0xbf, 0xd9, 0xed, 0xfa, 0x86, 0xb5, 0x55, 0xff, 0xe5, 0xaf, 0x1b,
	0xd6, 0xb7, 0x95, 0xf1, 0xdd, 0x93, 0x19, 0xfd, 0xb4, 0xfa, 0xe8, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xd4, 0x7e, 0xcf, 0x86, 0xcf, 0x0c, 0x00, 0x00,
}

func (this *ApplicationSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationSpec)
	if !ok {
		that2, ok := that.(ApplicationSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.LogoUrl != that1.LogoUrl {
		return false
	}
	if this.ShortDescription != that1.ShortDescription {
		return false
	}
	if this.LongDescription != that1.LongDescription {
		return false
	}
	if this.DocumentationUrl != that1.DocumentationUrl {
		return false
	}
	if this.RepositoryUrl != that1.RepositoryUrl {
		return false
	}
	if this.ApplicationCreator != that1.ApplicationCreator {
		return false
	}
	if this.ApplicationProvider != that1.ApplicationProvider {
		return false
	}
	if this.ApplicationMaintainer != that1.ApplicationMaintainer {
		return false
	}
	if that1.DateCreated == nil {
		if this.DateCreated != nil {
			return false
		}
	} else if !this.DateCreated.Equal(*that1.DateCreated) {
		return false
	}
	if len(this.Versions) != len(that1.Versions) {
		return false
	}
	for i := range this.Versions {
		if !this.Versions[i].Equal(that1.Versions[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ApplicationSpecs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationSpecs)
	if !ok {
		that2, ok := that.(ApplicationSpecs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Specs) != len(that1.Specs) {
		return false
	}
	for i := range this.Specs {
		if !this.Specs[i].Equal(that1.Specs[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *VersionedApplicationSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VersionedApplicationSpec)
	if !ok {
		that2, ok := that.(VersionedApplicationSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if that1.DatePublished == nil {
		if this.DatePublished != nil {
			return false
		}
	} else if !this.DatePublished.Equal(*that1.DatePublished) {
		return false
	}
	if that1.InstallationSpec == nil {
		if this.InstallationSpec != nil {
			return false
		}
	} else if this.InstallationSpec == nil {
		return false
	} else if !this.InstallationSpec.Equal(that1.InstallationSpec) {
		return false
	}
	if this.ValuesYaml != that1.ValuesYaml {
		return false
	}
	if len(this.RequiredLabels) != len(that1.RequiredLabels) {
		return false
	}
	for i := range this.RequiredLabels {
		if this.RequiredLabels[i] != that1.RequiredLabels[i] {
			return false
		}
	}
	if len(this.Flavors) != len(that1.Flavors) {
		return false
	}
	for i := range this.Flavors {
		if !this.Flavors[i].Equal(that1.Flavors[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *VersionedApplicationSpec_GithubChart) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VersionedApplicationSpec_GithubChart)
	if !ok {
		that2, ok := that.(VersionedApplicationSpec_GithubChart)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GithubChart.Equal(that1.GithubChart) {
		return false
	}
	return true
}
func (this *VersionedApplicationSpec_HelmArchive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VersionedApplicationSpec_HelmArchive)
	if !ok {
		that2, ok := that.(VersionedApplicationSpec_HelmArchive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HelmArchive.Equal(that1.HelmArchive) {
		return false
	}
	return true
}
func (this *VersionedApplicationSpec_ManifestsArchive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VersionedApplicationSpec_ManifestsArchive)
	if !ok {
		that2, ok := that.(VersionedApplicationSpec_ManifestsArchive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ManifestsArchive.Equal(that1.ManifestsArchive) {
		return false
	}
	return true
}
func (this *VersionedApplicationSpec_InstallationSteps) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VersionedApplicationSpec_InstallationSteps)
	if !ok {
		that2, ok := that.(VersionedApplicationSpec_InstallationSteps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InstallationSteps.Equal(that1.InstallationSteps) {
		return false
	}
	return true
}
func (this *InstallationSteps) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InstallationSteps)
	if !ok {
		that2, ok := that.(InstallationSteps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Steps) != len(that1.Steps) {
		return false
	}
	for i := range this.Steps {
		if !this.Steps[i].Equal(that1.Steps[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *InstallationSteps_Step) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InstallationSteps_Step)
	if !ok {
		that2, ok := that.(InstallationSteps_Step)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if that1.Step == nil {
		if this.Step != nil {
			return false
		}
	} else if this.Step == nil {
		return false
	} else if !this.Step.Equal(that1.Step) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *InstallationSteps_Step_GithubChart) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InstallationSteps_Step_GithubChart)
	if !ok {
		that2, ok := that.(InstallationSteps_Step_GithubChart)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GithubChart.Equal(that1.GithubChart) {
		return false
	}
	return true
}
func (this *InstallationSteps_Step_HelmArchive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InstallationSteps_Step_HelmArchive)
	if !ok {
		that2, ok := that.(InstallationSteps_Step_HelmArchive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HelmArchive.Equal(that1.HelmArchive) {
		return false
	}
	return true
}
func (this *InstallationSteps_Step_ManifestsArchive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InstallationSteps_Step_ManifestsArchive)
	if !ok {
		that2, ok := that.(InstallationSteps_Step_ManifestsArchive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ManifestsArchive.Equal(that1.ManifestsArchive) {
		return false
	}
	return true
}
func (this *Flavor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Flavor)
	if !ok {
		that2, ok := that.(Flavor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.CustomizationLayers) != len(that1.CustomizationLayers) {
		return false
	}
	for i := range this.CustomizationLayers {
		if !this.CustomizationLayers[i].Equal(that1.CustomizationLayers[i]) {
			return false
		}
	}
	if len(this.RequirementSets) != len(that1.RequirementSets) {
		return false
	}
	for i := range this.RequirementSets {
		if !this.RequirementSets[i].Equal(that1.RequirementSets[i]) {
			return false
		}
	}
	if len(this.Parameters) != len(that1.Parameters) {
		return false
	}
	for i := range this.Parameters {
		if !this.Parameters[i].Equal(that1.Parameters[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Parameter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Parameter)
	if !ok {
		that2, ok := that.(Parameter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Default != that1.Default {
		return false
	}
	if this.Required != that1.Required {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Layer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Layer)
	if !ok {
		that2, ok := that.(Layer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Type == nil {
		if this.Type != nil {
			return false
		}
	} else if this.Type == nil {
		return false
	} else if !this.Type.Equal(that1.Type) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Layer_Kustomize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Layer_Kustomize)
	if !ok {
		that2, ok := that.(Layer_Kustomize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Kustomize.Equal(that1.Kustomize) {
		return false
	}
	return true
}
func (this *Kustomize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Kustomize)
	if !ok {
		that2, ok := that.(Kustomize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Location == nil {
		if this.Location != nil {
			return false
		}
	} else if this.Location == nil {
		return false
	} else if !this.Location.Equal(that1.Location) {
		return false
	}
	if this.OverlayPath != that1.OverlayPath {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Kustomize_Github) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Kustomize_Github)
	if !ok {
		that2, ok := that.(Kustomize_Github)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Github.Equal(that1.Github) {
		return false
	}
	return true
}
func (this *Kustomize_TgzArchive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Kustomize_TgzArchive)
	if !ok {
		that2, ok := that.(Kustomize_TgzArchive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TgzArchive.Equal(that1.TgzArchive) {
		return false
	}
	return true
}
func (this *FlavorCompatibility) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlavorCompatibility)
	if !ok {
		that2, ok := that.(FlavorCompatibility)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.CompatiblePairs) != len(that1.CompatiblePairs) {
		return false
	}
	for i := range this.CompatiblePairs {
		if !this.CompatiblePairs[i].Equal(that1.CompatiblePairs[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CompatibleFlavorMeshPair) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompatibleFlavorMeshPair)
	if !ok {
		that2, ok := that.(CompatibleFlavorMeshPair)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Flavor.Equal(that1.Flavor) {
		return false
	}
	if !this.Mesh.Equal(that1.Mesh) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RequirementSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequirementSet)
	if !ok {
		that2, ok := that.(RequirementSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MeshRequirement.Equal(that1.MeshRequirement) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MeshRequirement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshRequirement)
	if !ok {
		that2, ok := that.(MeshRequirement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MeshType != that1.MeshType {
		return false
	}
	if !this.Versions.Equal(that1.Versions) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GithubRepositoryLocation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GithubRepositoryLocation)
	if !ok {
		that2, ok := that.(GithubRepositoryLocation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Org != that1.Org {
		return false
	}
	if this.Repo != that1.Repo {
		return false
	}
	if this.Ref != that1.Ref {
		return false
	}
	if this.Directory != that1.Directory {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TgzLocation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TgzLocation)
	if !ok {
		that2, ok := that.(TgzLocation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uri != that1.Uri {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AllowedVersions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllowedVersions)
	if !ok {
		that2, ok := that.(AllowedVersions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinVersion != that1.MinVersion {
		return false
	}
	if this.MaxVersion != that1.MaxVersion {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
