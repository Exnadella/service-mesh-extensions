// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/registry.proto

package v1

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	math "math"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Convenience enum to inform Service Mesh Hub interface implementations.
// Types here should be kept in sync with the ParameterValue message.
type ParameterType int32

const (
	ParameterType_STRING ParameterType = 0
	ParameterType_FLOAT  ParameterType = 1
	ParameterType_BOOL   ParameterType = 2
	ParameterType_INT    ParameterType = 3
	ParameterType_DATE   ParameterType = 4
	ParameterType_SECRET ParameterType = 5
)

var ParameterType_name = map[int32]string{
	0: "STRING",
	1: "FLOAT",
	2: "BOOL",
	3: "INT",
	4: "DATE",
	5: "SECRET",
}

var ParameterType_value = map[string]int32{
	"STRING": 0,
	"FLOAT":  1,
	"BOOL":   2,
	"INT":    3,
	"DATE":   4,
	"SECRET": 5,
}

func (x ParameterType) String() string {
	return proto.EnumName(ParameterType_name, int32(x))
}

func (ParameterType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{0}
}

type ApplicationType int32

const (
	ApplicationType_EXTENSION ApplicationType = 0
	ApplicationType_DEMO      ApplicationType = 1
	ApplicationType_MESH      ApplicationType = 2
)

var ApplicationType_name = map[int32]string{
	0: "EXTENSION",
	1: "DEMO",
	2: "MESH",
}

var ApplicationType_value = map[string]int32{
	"EXTENSION": 0,
	"DEMO":      1,
	"MESH":      2,
}

func (x ApplicationType) String() string {
	return proto.EnumName(ApplicationType_name, int32(x))
}

func (ApplicationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{1}
}

type MeshType int32

const (
	MeshType_ISTIO        MeshType = 0
	MeshType_LINKERD      MeshType = 1
	MeshType_AWS_APP_MESH MeshType = 2
)

var MeshType_name = map[int32]string{
	0: "ISTIO",
	1: "LINKERD",
	2: "AWS_APP_MESH",
}

var MeshType_value = map[string]int32{
	"ISTIO":        0,
	"LINKERD":      1,
	"AWS_APP_MESH": 2,
}

func (x MeshType) String() string {
	return proto.EnumName(MeshType_name, int32(x))
}

func (MeshType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{2}
}

// This is static content for an application. It includes basic metadata that is common to every version of an
// application, and a list of versions. For each version, there is information about how to install the application
// (for example, a Helm chart location), and the requirements for installation.
type ApplicationSpec struct {
	Type             ApplicationType `protobuf:"varint,1,opt,name=type,proto3,enum=hub.solo.io.ApplicationType" json:"type,omitempty"`
	Name             string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	LogoUrl          string          `protobuf:"bytes,3,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	ShortDescription string          `protobuf:"bytes,4,opt,name=short_description,json=shortDescription,proto3" json:"short_description,omitempty"`
	// Note that long description will be overwritten by the content of description.md if provided.
	LongDescription       string                      `protobuf:"bytes,5,opt,name=long_description,json=longDescription,proto3" json:"long_description,omitempty"`
	DocumentationUrl      string                      `protobuf:"bytes,6,opt,name=documentation_url,json=documentationUrl,proto3" json:"documentation_url,omitempty"`
	RepositoryUrl         string                      `protobuf:"bytes,7,opt,name=repository_url,json=repositoryUrl,proto3" json:"repository_url,omitempty"`
	ApplicationCreator    string                      `protobuf:"bytes,8,opt,name=application_creator,json=applicationCreator,proto3" json:"application_creator,omitempty"`
	ApplicationProvider   string                      `protobuf:"bytes,9,opt,name=application_provider,json=applicationProvider,proto3" json:"application_provider,omitempty"`
	ApplicationMaintainer string                      `protobuf:"bytes,10,opt,name=application_maintainer,json=applicationMaintainer,proto3" json:"application_maintainer,omitempty"`
	DateCreated           *time.Time                  `protobuf:"bytes,11,opt,name=date_created,json=dateCreated,proto3,stdtime" json:"date_created,omitempty"`
	Versions              []*VersionedApplicationSpec `protobuf:"bytes,12,rep,name=versions,proto3" json:"versions,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                    `json:"-"`
	XXX_unrecognized      []byte                      `json:"-"`
	XXX_sizecache         int32                       `json:"-"`
}

func (m *ApplicationSpec) Reset()         { *m = ApplicationSpec{} }
func (m *ApplicationSpec) String() string { return proto.CompactTextString(m) }
func (*ApplicationSpec) ProtoMessage()    {}
func (*ApplicationSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{0}
}
func (m *ApplicationSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationSpec.Unmarshal(m, b)
}
func (m *ApplicationSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationSpec.Marshal(b, m, deterministic)
}
func (m *ApplicationSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSpec.Merge(m, src)
}
func (m *ApplicationSpec) XXX_Size() int {
	return xxx_messageInfo_ApplicationSpec.Size(m)
}
func (m *ApplicationSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSpec proto.InternalMessageInfo

func (m *ApplicationSpec) GetType() ApplicationType {
	if m != nil {
		return m.Type
	}
	return ApplicationType_EXTENSION
}

func (m *ApplicationSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApplicationSpec) GetLogoUrl() string {
	if m != nil {
		return m.LogoUrl
	}
	return ""
}

func (m *ApplicationSpec) GetShortDescription() string {
	if m != nil {
		return m.ShortDescription
	}
	return ""
}

func (m *ApplicationSpec) GetLongDescription() string {
	if m != nil {
		return m.LongDescription
	}
	return ""
}

func (m *ApplicationSpec) GetDocumentationUrl() string {
	if m != nil {
		return m.DocumentationUrl
	}
	return ""
}

func (m *ApplicationSpec) GetRepositoryUrl() string {
	if m != nil {
		return m.RepositoryUrl
	}
	return ""
}

func (m *ApplicationSpec) GetApplicationCreator() string {
	if m != nil {
		return m.ApplicationCreator
	}
	return ""
}

func (m *ApplicationSpec) GetApplicationProvider() string {
	if m != nil {
		return m.ApplicationProvider
	}
	return ""
}

func (m *ApplicationSpec) GetApplicationMaintainer() string {
	if m != nil {
		return m.ApplicationMaintainer
	}
	return ""
}

func (m *ApplicationSpec) GetDateCreated() *time.Time {
	if m != nil {
		return m.DateCreated
	}
	return nil
}

func (m *ApplicationSpec) GetVersions() []*VersionedApplicationSpec {
	if m != nil {
		return m.Versions
	}
	return nil
}

type ApplicationSpecs struct {
	Specs                []*ApplicationSpec `protobuf:"bytes,1,rep,name=specs,proto3" json:"specs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ApplicationSpecs) Reset()         { *m = ApplicationSpecs{} }
func (m *ApplicationSpecs) String() string { return proto.CompactTextString(m) }
func (*ApplicationSpecs) ProtoMessage()    {}
func (*ApplicationSpecs) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{1}
}
func (m *ApplicationSpecs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationSpecs.Unmarshal(m, b)
}
func (m *ApplicationSpecs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationSpecs.Marshal(b, m, deterministic)
}
func (m *ApplicationSpecs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSpecs.Merge(m, src)
}
func (m *ApplicationSpecs) XXX_Size() int {
	return xxx_messageInfo_ApplicationSpecs.Size(m)
}
func (m *ApplicationSpecs) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSpecs.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSpecs proto.InternalMessageInfo

func (m *ApplicationSpecs) GetSpecs() []*ApplicationSpec {
	if m != nil {
		return m.Specs
	}
	return nil
}

// Represents a specific version of an extension.
type VersionedApplicationSpec struct {
	// The version of the application
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// The date this version of the application was published
	DatePublished *time.Time `protobuf:"bytes,2,opt,name=date_published,json=datePublished,proto3,stdtime" json:"date_published,omitempty"`
	// Location of the Helm chart that will be used to install this application
	//
	// Types that are valid to be assigned to InstallationSpec:
	//	*VersionedApplicationSpec_GithubChart
	//	*VersionedApplicationSpec_HelmArchive
	//	*VersionedApplicationSpec_ManifestsArchive
	//	*VersionedApplicationSpec_InstallationSteps
	InstallationSpec isVersionedApplicationSpec_InstallationSpec `protobuf_oneof:"installation_spec"`
	// Optional default values yaml; if none provided, chart default will be used
	ValuesYaml string `protobuf:"bytes,30,opt,name=values_yaml,json=valuesYaml,proto3" json:"values_yaml,omitempty"`
	// Optional filter on the resources that should be considered part of the install, to handle cases
	// where a single chart can be used to deploy many applications (i.e. Istio chart deploys Kiali)
	RequiredLabels map[string]string `protobuf:"bytes,31,rep,name=required_labels,json=requiredLabels,proto3" json:"required_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Mesh-specific modifications to the extension installation manifest.
	Flavors []*Flavor `protobuf:"bytes,40,rep,name=flavors,proto3" json:"flavors,omitempty"`
	// Do not override predefined namespaces of resources as they appear in manifests
	RespectManifestNamespaces bool `protobuf:"varint,41,opt,name=respect_manifest_namespaces,json=respectManifestNamespaces,proto3" json:"respect_manifest_namespaces,omitempty"`
	// Manifest render parameters that apply to all flavors of this version
	Parameters           []*Parameter `protobuf:"bytes,42,rep,name=parameters,proto3" json:"parameters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *VersionedApplicationSpec) Reset()         { *m = VersionedApplicationSpec{} }
func (m *VersionedApplicationSpec) String() string { return proto.CompactTextString(m) }
func (*VersionedApplicationSpec) ProtoMessage()    {}
func (*VersionedApplicationSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{2}
}
func (m *VersionedApplicationSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionedApplicationSpec.Unmarshal(m, b)
}
func (m *VersionedApplicationSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionedApplicationSpec.Marshal(b, m, deterministic)
}
func (m *VersionedApplicationSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionedApplicationSpec.Merge(m, src)
}
func (m *VersionedApplicationSpec) XXX_Size() int {
	return xxx_messageInfo_VersionedApplicationSpec.Size(m)
}
func (m *VersionedApplicationSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionedApplicationSpec.DiscardUnknown(m)
}

var xxx_messageInfo_VersionedApplicationSpec proto.InternalMessageInfo

type isVersionedApplicationSpec_InstallationSpec interface {
	isVersionedApplicationSpec_InstallationSpec()
	Equal(interface{}) bool
}

type VersionedApplicationSpec_GithubChart struct {
	GithubChart *GithubRepositoryLocation `protobuf:"bytes,13,opt,name=github_chart,json=githubChart,proto3,oneof" json:"github_chart,omitempty"`
}
type VersionedApplicationSpec_HelmArchive struct {
	HelmArchive *TgzLocation `protobuf:"bytes,14,opt,name=helm_archive,json=helmArchive,proto3,oneof" json:"helm_archive,omitempty"`
}
type VersionedApplicationSpec_ManifestsArchive struct {
	ManifestsArchive *TgzLocation `protobuf:"bytes,15,opt,name=manifests_archive,json=manifestsArchive,proto3,oneof" json:"manifests_archive,omitempty"`
}
type VersionedApplicationSpec_InstallationSteps struct {
	InstallationSteps *InstallationSteps `protobuf:"bytes,16,opt,name=installation_steps,json=installationSteps,proto3,oneof" json:"installation_steps,omitempty"`
}

func (*VersionedApplicationSpec_GithubChart) isVersionedApplicationSpec_InstallationSpec()       {}
func (*VersionedApplicationSpec_HelmArchive) isVersionedApplicationSpec_InstallationSpec()       {}
func (*VersionedApplicationSpec_ManifestsArchive) isVersionedApplicationSpec_InstallationSpec()  {}
func (*VersionedApplicationSpec_InstallationSteps) isVersionedApplicationSpec_InstallationSpec() {}

func (m *VersionedApplicationSpec) GetInstallationSpec() isVersionedApplicationSpec_InstallationSpec {
	if m != nil {
		return m.InstallationSpec
	}
	return nil
}

func (m *VersionedApplicationSpec) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *VersionedApplicationSpec) GetDatePublished() *time.Time {
	if m != nil {
		return m.DatePublished
	}
	return nil
}

func (m *VersionedApplicationSpec) GetGithubChart() *GithubRepositoryLocation {
	if x, ok := m.GetInstallationSpec().(*VersionedApplicationSpec_GithubChart); ok {
		return x.GithubChart
	}
	return nil
}

func (m *VersionedApplicationSpec) GetHelmArchive() *TgzLocation {
	if x, ok := m.GetInstallationSpec().(*VersionedApplicationSpec_HelmArchive); ok {
		return x.HelmArchive
	}
	return nil
}

func (m *VersionedApplicationSpec) GetManifestsArchive() *TgzLocation {
	if x, ok := m.GetInstallationSpec().(*VersionedApplicationSpec_ManifestsArchive); ok {
		return x.ManifestsArchive
	}
	return nil
}

func (m *VersionedApplicationSpec) GetInstallationSteps() *InstallationSteps {
	if x, ok := m.GetInstallationSpec().(*VersionedApplicationSpec_InstallationSteps); ok {
		return x.InstallationSteps
	}
	return nil
}

func (m *VersionedApplicationSpec) GetValuesYaml() string {
	if m != nil {
		return m.ValuesYaml
	}
	return ""
}

func (m *VersionedApplicationSpec) GetRequiredLabels() map[string]string {
	if m != nil {
		return m.RequiredLabels
	}
	return nil
}

func (m *VersionedApplicationSpec) GetFlavors() []*Flavor {
	if m != nil {
		return m.Flavors
	}
	return nil
}

func (m *VersionedApplicationSpec) GetRespectManifestNamespaces() bool {
	if m != nil {
		return m.RespectManifestNamespaces
	}
	return false
}

func (m *VersionedApplicationSpec) GetParameters() []*Parameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VersionedApplicationSpec) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VersionedApplicationSpec_GithubChart)(nil),
		(*VersionedApplicationSpec_HelmArchive)(nil),
		(*VersionedApplicationSpec_ManifestsArchive)(nil),
		(*VersionedApplicationSpec_InstallationSteps)(nil),
	}
}

// InstallationSteps specify an installation procedure for Applications composed of multiple manifests.
// It may be desirable or necessary for an Application to be installed in stages, e.g. to run a pre-installation
// job or container before deploying other components.
// Resources will be applied to the Kubernetes cluster in the order they appear in the installation steps.
// Resources created from each step will be labeled with the step from which they were created.
// Finally, after each step is applied, any resources created by Flavor customizations will be created last.
type InstallationSteps struct {
	// an ordered list of installation steps
	Steps                []*InstallationSteps_Step `protobuf:"bytes,1,rep,name=steps,proto3" json:"steps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *InstallationSteps) Reset()         { *m = InstallationSteps{} }
func (m *InstallationSteps) String() string { return proto.CompactTextString(m) }
func (*InstallationSteps) ProtoMessage()    {}
func (*InstallationSteps) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{3}
}
func (m *InstallationSteps) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstallationSteps.Unmarshal(m, b)
}
func (m *InstallationSteps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstallationSteps.Marshal(b, m, deterministic)
}
func (m *InstallationSteps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallationSteps.Merge(m, src)
}
func (m *InstallationSteps) XXX_Size() int {
	return xxx_messageInfo_InstallationSteps.Size(m)
}
func (m *InstallationSteps) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallationSteps.DiscardUnknown(m)
}

var xxx_messageInfo_InstallationSteps proto.InternalMessageInfo

func (m *InstallationSteps) GetSteps() []*InstallationSteps_Step {
	if m != nil {
		return m.Steps
	}
	return nil
}

type InstallationSteps_Step struct {
	// name of the installation step
	// each step must be uniquely named
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to Step:
	//	*InstallationSteps_Step_GithubChart
	//	*InstallationSteps_Step_HelmArchive
	//	*InstallationSteps_Step_ManifestsArchive
	Step                 isInstallationSteps_Step_Step `protobuf_oneof:"step"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *InstallationSteps_Step) Reset()         { *m = InstallationSteps_Step{} }
func (m *InstallationSteps_Step) String() string { return proto.CompactTextString(m) }
func (*InstallationSteps_Step) ProtoMessage()    {}
func (*InstallationSteps_Step) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{3, 0}
}
func (m *InstallationSteps_Step) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstallationSteps_Step.Unmarshal(m, b)
}
func (m *InstallationSteps_Step) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstallationSteps_Step.Marshal(b, m, deterministic)
}
func (m *InstallationSteps_Step) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallationSteps_Step.Merge(m, src)
}
func (m *InstallationSteps_Step) XXX_Size() int {
	return xxx_messageInfo_InstallationSteps_Step.Size(m)
}
func (m *InstallationSteps_Step) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallationSteps_Step.DiscardUnknown(m)
}

var xxx_messageInfo_InstallationSteps_Step proto.InternalMessageInfo

type isInstallationSteps_Step_Step interface {
	isInstallationSteps_Step_Step()
	Equal(interface{}) bool
}

type InstallationSteps_Step_GithubChart struct {
	GithubChart *GithubRepositoryLocation `protobuf:"bytes,1,opt,name=github_chart,json=githubChart,proto3,oneof" json:"github_chart,omitempty"`
}
type InstallationSteps_Step_HelmArchive struct {
	HelmArchive *TgzLocation `protobuf:"bytes,2,opt,name=helm_archive,json=helmArchive,proto3,oneof" json:"helm_archive,omitempty"`
}
type InstallationSteps_Step_ManifestsArchive struct {
	ManifestsArchive *TgzLocation `protobuf:"bytes,3,opt,name=manifests_archive,json=manifestsArchive,proto3,oneof" json:"manifests_archive,omitempty"`
}

func (*InstallationSteps_Step_GithubChart) isInstallationSteps_Step_Step()      {}
func (*InstallationSteps_Step_HelmArchive) isInstallationSteps_Step_Step()      {}
func (*InstallationSteps_Step_ManifestsArchive) isInstallationSteps_Step_Step() {}

func (m *InstallationSteps_Step) GetStep() isInstallationSteps_Step_Step {
	if m != nil {
		return m.Step
	}
	return nil
}

func (m *InstallationSteps_Step) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InstallationSteps_Step) GetGithubChart() *GithubRepositoryLocation {
	if x, ok := m.GetStep().(*InstallationSteps_Step_GithubChart); ok {
		return x.GithubChart
	}
	return nil
}

func (m *InstallationSteps_Step) GetHelmArchive() *TgzLocation {
	if x, ok := m.GetStep().(*InstallationSteps_Step_HelmArchive); ok {
		return x.HelmArchive
	}
	return nil
}

func (m *InstallationSteps_Step) GetManifestsArchive() *TgzLocation {
	if x, ok := m.GetStep().(*InstallationSteps_Step_ManifestsArchive); ok {
		return x.ManifestsArchive
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*InstallationSteps_Step) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*InstallationSteps_Step_GithubChart)(nil),
		(*InstallationSteps_Step_HelmArchive)(nil),
		(*InstallationSteps_Step_ManifestsArchive)(nil),
	}
}

// A flavor represents a particular variant of an extension.
type Flavor struct {
	// Identifier of the flavor
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// This field should contain a clear description of what this flavor is intended to accomplish.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Optional customizations that are to be applied to the installation manifest.
	CustomizationLayers []*Layer `protobuf:"bytes,3,rep,name=customization_layers,json=customizationLayers,proto3" json:"customization_layers,omitempty"`
	// The flavor is considered applicable if any of the specified requirement sets is satisfied.
	RequirementSets []*RequirementSet `protobuf:"bytes,4,rep,name=requirement_sets,json=requirementSets,proto3" json:"requirement_sets,omitempty"`
	// Optional set of parameters to be applied to the flavor.
	Parameters           []*Parameter `protobuf:"bytes,5,rep,name=parameters,proto3" json:"parameters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Flavor) Reset()         { *m = Flavor{} }
func (m *Flavor) String() string { return proto.CompactTextString(m) }
func (*Flavor) ProtoMessage()    {}
func (*Flavor) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{4}
}
func (m *Flavor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Flavor.Unmarshal(m, b)
}
func (m *Flavor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Flavor.Marshal(b, m, deterministic)
}
func (m *Flavor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flavor.Merge(m, src)
}
func (m *Flavor) XXX_Size() int {
	return xxx_messageInfo_Flavor.Size(m)
}
func (m *Flavor) XXX_DiscardUnknown() {
	xxx_messageInfo_Flavor.DiscardUnknown(m)
}

var xxx_messageInfo_Flavor proto.InternalMessageInfo

func (m *Flavor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Flavor) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Flavor) GetCustomizationLayers() []*Layer {
	if m != nil {
		return m.CustomizationLayers
	}
	return nil
}

func (m *Flavor) GetRequirementSets() []*RequirementSet {
	if m != nil {
		return m.RequirementSets
	}
	return nil
}

func (m *Flavor) GetParameters() []*Parameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

// A layer represent optional processing steps that can be executed to apply mesh-specific transformations to
// the rendered extension installation manifest.
type Layer struct {
	// A unique identifier for the layer, i.e. "mtls"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A user-friendly name of the layer, i.e. "Mutual TLS Settings"
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// An optional description of the layer's effect on the manifest rendering.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// If true, this layer can be flagged on or off for rendering.
	Optional bool `protobuf:"varint,4,opt,name=optional,proto3" json:"optional,omitempty"`
	// One or more variants for this configuration layer, one of which will be chosen by the user.
	Options              []*LayerOption `protobuf:"bytes,5,rep,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Layer) Reset()         { *m = Layer{} }
func (m *Layer) String() string { return proto.CompactTextString(m) }
func (*Layer) ProtoMessage()    {}
func (*Layer) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{5}
}
func (m *Layer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Layer.Unmarshal(m, b)
}
func (m *Layer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Layer.Marshal(b, m, deterministic)
}
func (m *Layer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Layer.Merge(m, src)
}
func (m *Layer) XXX_Size() int {
	return xxx_messageInfo_Layer.Size(m)
}
func (m *Layer) XXX_DiscardUnknown() {
	xxx_messageInfo_Layer.DiscardUnknown(m)
}

var xxx_messageInfo_Layer proto.InternalMessageInfo

func (m *Layer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Layer) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Layer) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Layer) GetOptional() bool {
	if m != nil {
		return m.Optional
	}
	return false
}

func (m *Layer) GetOptions() []*LayerOption {
	if m != nil {
		return m.Options
	}
	return nil
}

// One option for configuring a layer. At least one of the kustomize or helm values should be set, or the layer
// will be a no-op during rendering.
type LayerOption struct {
	// Unique identifier for the layer option, i.e. "strict"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A user-friendly name
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// A user-friendly description
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// A kustomize overlay
	Kustomize *Kustomize `protobuf:"bytes,4,opt,name=kustomize,proto3" json:"kustomize,omitempty"`
	// A set of value overrides
	HelmValues string `protobuf:"bytes,5,opt,name=helm_values,json=helmValues,proto3" json:"helm_values,omitempty"`
	// Optional set of parameters to be applied to the layer.
	Parameters []*Parameter `protobuf:"bytes,6,rep,name=parameters,proto3" json:"parameters,omitempty"`
	// Optional set of cluster requirements for this layer option.
	// Interfaces to the renderer can implement validations against these requirements.
	// TODO does this make more sense on the layer itself?
	EnvironmentRequirements []*EnvironmentRequirements `protobuf:"bytes,7,rep,name=environment_requirements,json=environmentRequirements,proto3" json:"environment_requirements,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                   `json:"-"`
	XXX_unrecognized        []byte                     `json:"-"`
	XXX_sizecache           int32                      `json:"-"`
}

func (m *LayerOption) Reset()         { *m = LayerOption{} }
func (m *LayerOption) String() string { return proto.CompactTextString(m) }
func (*LayerOption) ProtoMessage()    {}
func (*LayerOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{6}
}
func (m *LayerOption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LayerOption.Unmarshal(m, b)
}
func (m *LayerOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LayerOption.Marshal(b, m, deterministic)
}
func (m *LayerOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LayerOption.Merge(m, src)
}
func (m *LayerOption) XXX_Size() int {
	return xxx_messageInfo_LayerOption.Size(m)
}
func (m *LayerOption) XXX_DiscardUnknown() {
	xxx_messageInfo_LayerOption.DiscardUnknown(m)
}

var xxx_messageInfo_LayerOption proto.InternalMessageInfo

func (m *LayerOption) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LayerOption) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *LayerOption) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *LayerOption) GetKustomize() *Kustomize {
	if m != nil {
		return m.Kustomize
	}
	return nil
}

func (m *LayerOption) GetHelmValues() string {
	if m != nil {
		return m.HelmValues
	}
	return ""
}

func (m *LayerOption) GetParameters() []*Parameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *LayerOption) GetEnvironmentRequirements() []*EnvironmentRequirements {
	if m != nil {
		return m.EnvironmentRequirements
	}
	return nil
}

type EnvironmentRequirements struct {
	// Optional set of resources that must be present in the cluster for this layer to function correctly.
	// Note that these resources do not factor into manifest rendering, but can be used by interfaces to the
	// renderer to validate or create expected resources on the cluster before install.
	ResourceDependencies []*ResourceDependency `protobuf:"bytes,1,rep,name=resource_dependencies,json=resourceDependencies,proto3" json:"resource_dependencies,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *EnvironmentRequirements) Reset()         { *m = EnvironmentRequirements{} }
func (m *EnvironmentRequirements) String() string { return proto.CompactTextString(m) }
func (*EnvironmentRequirements) ProtoMessage()    {}
func (*EnvironmentRequirements) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{7}
}
func (m *EnvironmentRequirements) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnvironmentRequirements.Unmarshal(m, b)
}
func (m *EnvironmentRequirements) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnvironmentRequirements.Marshal(b, m, deterministic)
}
func (m *EnvironmentRequirements) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnvironmentRequirements.Merge(m, src)
}
func (m *EnvironmentRequirements) XXX_Size() int {
	return xxx_messageInfo_EnvironmentRequirements.Size(m)
}
func (m *EnvironmentRequirements) XXX_DiscardUnknown() {
	xxx_messageInfo_EnvironmentRequirements.DiscardUnknown(m)
}

var xxx_messageInfo_EnvironmentRequirements proto.InternalMessageInfo

func (m *EnvironmentRequirements) GetResourceDependencies() []*ResourceDependency {
	if m != nil {
		return m.ResourceDependencies
	}
	return nil
}

// Represents a resource that must be present on a cluster for install to succeed.
type ResourceDependency struct {
	// Types that are valid to be assigned to Type:
	//	*ResourceDependency_Secret_
	//	*ResourceDependency_Application_
	Type                 isResourceDependency_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ResourceDependency) Reset()         { *m = ResourceDependency{} }
func (m *ResourceDependency) String() string { return proto.CompactTextString(m) }
func (*ResourceDependency) ProtoMessage()    {}
func (*ResourceDependency) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{8}
}
func (m *ResourceDependency) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceDependency.Unmarshal(m, b)
}
func (m *ResourceDependency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceDependency.Marshal(b, m, deterministic)
}
func (m *ResourceDependency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceDependency.Merge(m, src)
}
func (m *ResourceDependency) XXX_Size() int {
	return xxx_messageInfo_ResourceDependency.Size(m)
}
func (m *ResourceDependency) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceDependency.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceDependency proto.InternalMessageInfo

type isResourceDependency_Type interface {
	isResourceDependency_Type()
	Equal(interface{}) bool
}

type ResourceDependency_Secret_ struct {
	Secret *ResourceDependency_Secret `protobuf:"bytes,1,opt,name=secret,proto3,oneof" json:"secret,omitempty"`
}
type ResourceDependency_Application_ struct {
	Application *ResourceDependency_Application `protobuf:"bytes,2,opt,name=application,proto3,oneof" json:"application,omitempty"`
}

func (*ResourceDependency_Secret_) isResourceDependency_Type()      {}
func (*ResourceDependency_Application_) isResourceDependency_Type() {}

func (m *ResourceDependency) GetType() isResourceDependency_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ResourceDependency) GetSecret() *ResourceDependency_Secret {
	if x, ok := m.GetType().(*ResourceDependency_Secret_); ok {
		return x.Secret
	}
	return nil
}

func (m *ResourceDependency) GetApplication() *ResourceDependency_Application {
	if x, ok := m.GetType().(*ResourceDependency_Application_); ok {
		return x.Application
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ResourceDependency) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ResourceDependency_Secret_)(nil),
		(*ResourceDependency_Application_)(nil),
	}
}

// Describes a Kubernetes Secret
type ResourceDependency_Secret struct {
	// Corresponds to the name on the object metadata of the secret.
	// Note that referenced secrets must be in the Service Mesh Hub operator's install namespace.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// List of keys that should be present on the Secret's data map
	Keys                 []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourceDependency_Secret) Reset()         { *m = ResourceDependency_Secret{} }
func (m *ResourceDependency_Secret) String() string { return proto.CompactTextString(m) }
func (*ResourceDependency_Secret) ProtoMessage()    {}
func (*ResourceDependency_Secret) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{8, 0}
}
func (m *ResourceDependency_Secret) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceDependency_Secret.Unmarshal(m, b)
}
func (m *ResourceDependency_Secret) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceDependency_Secret.Marshal(b, m, deterministic)
}
func (m *ResourceDependency_Secret) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceDependency_Secret.Merge(m, src)
}
func (m *ResourceDependency_Secret) XXX_Size() int {
	return xxx_messageInfo_ResourceDependency_Secret.Size(m)
}
func (m *ResourceDependency_Secret) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceDependency_Secret.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceDependency_Secret proto.InternalMessageInfo

func (m *ResourceDependency_Secret) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ResourceDependency_Secret) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

// Describes a Service Mesh Hub application.
// Referenced applications must be available via a registry on the user's Hub instance.
// Applies to application installations managed by Service Mesh Hub.
type ResourceDependency_Application struct {
	// The name of the application as defined in the application's spec.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourceDependency_Application) Reset()         { *m = ResourceDependency_Application{} }
func (m *ResourceDependency_Application) String() string { return proto.CompactTextString(m) }
func (*ResourceDependency_Application) ProtoMessage()    {}
func (*ResourceDependency_Application) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{8, 1}
}
func (m *ResourceDependency_Application) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceDependency_Application.Unmarshal(m, b)
}
func (m *ResourceDependency_Application) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceDependency_Application.Marshal(b, m, deterministic)
}
func (m *ResourceDependency_Application) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceDependency_Application.Merge(m, src)
}
func (m *ResourceDependency_Application) XXX_Size() int {
	return xxx_messageInfo_ResourceDependency_Application.Size(m)
}
func (m *ResourceDependency_Application) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceDependency_Application.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceDependency_Application proto.InternalMessageInfo

func (m *ResourceDependency_Application) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Represents a layer implemented via [kustomize](https://github.com/kubernetes-sigs/kustomize)
type Kustomize struct {
	// Location of the root of the kustomize directory structure
	//
	// Types that are valid to be assigned to Location:
	//	*Kustomize_Github
	//	*Kustomize_TgzArchive
	Location isKustomize_Location `protobuf_oneof:"location"`
	// Path to the overlay overlay that will be applied to the base (the rendered installation manifest).
	OverlayPath          string   `protobuf:"bytes,3,opt,name=overlay_path,json=overlayPath,proto3" json:"overlay_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Kustomize) Reset()         { *m = Kustomize{} }
func (m *Kustomize) String() string { return proto.CompactTextString(m) }
func (*Kustomize) ProtoMessage()    {}
func (*Kustomize) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{9}
}
func (m *Kustomize) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Kustomize.Unmarshal(m, b)
}
func (m *Kustomize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Kustomize.Marshal(b, m, deterministic)
}
func (m *Kustomize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Kustomize.Merge(m, src)
}
func (m *Kustomize) XXX_Size() int {
	return xxx_messageInfo_Kustomize.Size(m)
}
func (m *Kustomize) XXX_DiscardUnknown() {
	xxx_messageInfo_Kustomize.DiscardUnknown(m)
}

var xxx_messageInfo_Kustomize proto.InternalMessageInfo

type isKustomize_Location interface {
	isKustomize_Location()
	Equal(interface{}) bool
}

type Kustomize_Github struct {
	Github *GithubRepositoryLocation `protobuf:"bytes,1,opt,name=github,proto3,oneof" json:"github,omitempty"`
}
type Kustomize_TgzArchive struct {
	TgzArchive *TgzLocation `protobuf:"bytes,2,opt,name=tgz_archive,json=tgzArchive,proto3,oneof" json:"tgz_archive,omitempty"`
}

func (*Kustomize_Github) isKustomize_Location()     {}
func (*Kustomize_TgzArchive) isKustomize_Location() {}

func (m *Kustomize) GetLocation() isKustomize_Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Kustomize) GetGithub() *GithubRepositoryLocation {
	if x, ok := m.GetLocation().(*Kustomize_Github); ok {
		return x.Github
	}
	return nil
}

func (m *Kustomize) GetTgzArchive() *TgzLocation {
	if x, ok := m.GetLocation().(*Kustomize_TgzArchive); ok {
		return x.TgzArchive
	}
	return nil
}

func (m *Kustomize) GetOverlayPath() string {
	if m != nil {
		return m.OverlayPath
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Kustomize) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Kustomize_Github)(nil),
		(*Kustomize_TgzArchive)(nil),
	}
}

// Parameters represent values that are used to configure the installation of an extension.
type Parameter struct {
	// Identifier of the parameter.
	// This doubles as the key used to access the parameter's value in templates during render.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Description of what the effects of the parameter are.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Type of the parameter.
	// Used by interfaces to the renderer.
	// Regardless of type, all parameters are ultimately strings passed as helm and layer template values.
	Type ParameterType `protobuf:"varint,3,opt,name=type,proto3,enum=hub.solo.io.ParameterType" json:"type,omitempty"`
	// Default value of the parameter.
	Default *ParameterValue `protobuf:"bytes,4,opt,name=default,proto3" json:"default,omitempty"`
	// Indicates whether a value for the parameter is required for the installation of the extension
	// to be performed.
	Required bool `protobuf:"varint,5,opt,name=required,proto3" json:"required,omitempty"`
	// User-friendly display name of the parameter
	DisplayName          string   `protobuf:"bytes,6,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Parameter) Reset()         { *m = Parameter{} }
func (m *Parameter) String() string { return proto.CompactTextString(m) }
func (*Parameter) ProtoMessage()    {}
func (*Parameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{10}
}
func (m *Parameter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Parameter.Unmarshal(m, b)
}
func (m *Parameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Parameter.Marshal(b, m, deterministic)
}
func (m *Parameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Parameter.Merge(m, src)
}
func (m *Parameter) XXX_Size() int {
	return xxx_messageInfo_Parameter.Size(m)
}
func (m *Parameter) XXX_DiscardUnknown() {
	xxx_messageInfo_Parameter.DiscardUnknown(m)
}

var xxx_messageInfo_Parameter proto.InternalMessageInfo

func (m *Parameter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Parameter) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Parameter) GetType() ParameterType {
	if m != nil {
		return m.Type
	}
	return ParameterType_STRING
}

func (m *Parameter) GetDefault() *ParameterValue {
	if m != nil {
		return m.Default
	}
	return nil
}

func (m *Parameter) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *Parameter) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

// Value for a parameter.
// Types here should be kept in sync with the ParameterType enum.
// Note that regardless of type, parameters are passed as string helm values.
type ParameterValue struct {
	// Types that are valid to be assigned to Type:
	//	*ParameterValue_StringValue
	//	*ParameterValue_IntValue
	//	*ParameterValue_FloatValue
	//	*ParameterValue_BooleanValue
	//	*ParameterValue_DateValue
	//	*ParameterValue_SecretValue
	Type                 isParameterValue_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ParameterValue) Reset()         { *m = ParameterValue{} }
func (m *ParameterValue) String() string { return proto.CompactTextString(m) }
func (*ParameterValue) ProtoMessage()    {}
func (*ParameterValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{11}
}
func (m *ParameterValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParameterValue.Unmarshal(m, b)
}
func (m *ParameterValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParameterValue.Marshal(b, m, deterministic)
}
func (m *ParameterValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParameterValue.Merge(m, src)
}
func (m *ParameterValue) XXX_Size() int {
	return xxx_messageInfo_ParameterValue.Size(m)
}
func (m *ParameterValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ParameterValue.DiscardUnknown(m)
}

var xxx_messageInfo_ParameterValue proto.InternalMessageInfo

type isParameterValue_Type interface {
	isParameterValue_Type()
	Equal(interface{}) bool
}

type ParameterValue_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof" json:"string_value,omitempty"`
}
type ParameterValue_IntValue struct {
	IntValue int64 `protobuf:"varint,2,opt,name=int_value,json=intValue,proto3,oneof" json:"int_value,omitempty"`
}
type ParameterValue_FloatValue struct {
	FloatValue float64 `protobuf:"fixed64,3,opt,name=float_value,json=floatValue,proto3,oneof" json:"float_value,omitempty"`
}
type ParameterValue_BooleanValue struct {
	BooleanValue bool `protobuf:"varint,4,opt,name=boolean_value,json=booleanValue,proto3,oneof" json:"boolean_value,omitempty"`
}
type ParameterValue_DateValue struct {
	DateValue *time.Time `protobuf:"bytes,5,opt,name=date_value,json=dateValue,proto3,oneof,stdtime" json:"date_value,omitempty"`
}
type ParameterValue_SecretValue struct {
	SecretValue *SecretValue `protobuf:"bytes,6,opt,name=secret_value,json=secretValue,proto3,oneof" json:"secret_value,omitempty"`
}

func (*ParameterValue_StringValue) isParameterValue_Type()  {}
func (*ParameterValue_IntValue) isParameterValue_Type()     {}
func (*ParameterValue_FloatValue) isParameterValue_Type()   {}
func (*ParameterValue_BooleanValue) isParameterValue_Type() {}
func (*ParameterValue_DateValue) isParameterValue_Type()    {}
func (*ParameterValue_SecretValue) isParameterValue_Type()  {}

func (m *ParameterValue) GetType() isParameterValue_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ParameterValue) GetStringValue() string {
	if x, ok := m.GetType().(*ParameterValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *ParameterValue) GetIntValue() int64 {
	if x, ok := m.GetType().(*ParameterValue_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (m *ParameterValue) GetFloatValue() float64 {
	if x, ok := m.GetType().(*ParameterValue_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (m *ParameterValue) GetBooleanValue() bool {
	if x, ok := m.GetType().(*ParameterValue_BooleanValue); ok {
		return x.BooleanValue
	}
	return false
}

func (m *ParameterValue) GetDateValue() *time.Time {
	if x, ok := m.GetType().(*ParameterValue_DateValue); ok {
		return x.DateValue
	}
	return nil
}

func (m *ParameterValue) GetSecretValue() *SecretValue {
	if x, ok := m.GetType().(*ParameterValue_SecretValue); ok {
		return x.SecretValue
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ParameterValue) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ParameterValue_StringValue)(nil),
		(*ParameterValue_IntValue)(nil),
		(*ParameterValue_FloatValue)(nil),
		(*ParameterValue_BooleanValue)(nil),
		(*ParameterValue_DateValue)(nil),
		(*ParameterValue_SecretValue)(nil),
	}
}

// Ref for a Kubernetes secret.
type SecretRef struct {
	Ref *core.ResourceRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// Where to locate the value of the secret in the `data` field
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SecretRef) Reset()         { *m = SecretRef{} }
func (m *SecretRef) String() string { return proto.CompactTextString(m) }
func (*SecretRef) ProtoMessage()    {}
func (*SecretRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{12}
}
func (m *SecretRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecretRef.Unmarshal(m, b)
}
func (m *SecretRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecretRef.Marshal(b, m, deterministic)
}
func (m *SecretRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecretRef.Merge(m, src)
}
func (m *SecretRef) XXX_Size() int {
	return xxx_messageInfo_SecretRef.Size(m)
}
func (m *SecretRef) XXX_DiscardUnknown() {
	xxx_messageInfo_SecretRef.DiscardUnknown(m)
}

var xxx_messageInfo_SecretRef proto.InternalMessageInfo

func (m *SecretRef) GetRef() *core.ResourceRef {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (m *SecretRef) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// Secrets can be provided to the render in a number of ways.
// Note that secrets will be rendered as plain text when being utilized by the renderer.
type SecretValue struct {
	// Types that are valid to be assigned to Type:
	//	*SecretValue_SecretRef
	//	*SecretValue_FilePath
	//	*SecretValue_PlainText
	Type                 isSecretValue_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SecretValue) Reset()         { *m = SecretValue{} }
func (m *SecretValue) String() string { return proto.CompactTextString(m) }
func (*SecretValue) ProtoMessage()    {}
func (*SecretValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{13}
}
func (m *SecretValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecretValue.Unmarshal(m, b)
}
func (m *SecretValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecretValue.Marshal(b, m, deterministic)
}
func (m *SecretValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecretValue.Merge(m, src)
}
func (m *SecretValue) XXX_Size() int {
	return xxx_messageInfo_SecretValue.Size(m)
}
func (m *SecretValue) XXX_DiscardUnknown() {
	xxx_messageInfo_SecretValue.DiscardUnknown(m)
}

var xxx_messageInfo_SecretValue proto.InternalMessageInfo

type isSecretValue_Type interface {
	isSecretValue_Type()
	Equal(interface{}) bool
}

type SecretValue_SecretRef struct {
	SecretRef *SecretRef `protobuf:"bytes,1,opt,name=secret_ref,json=secretRef,proto3,oneof" json:"secret_ref,omitempty"`
}
type SecretValue_FilePath struct {
	FilePath string `protobuf:"bytes,2,opt,name=file_path,json=filePath,proto3,oneof" json:"file_path,omitempty"`
}
type SecretValue_PlainText struct {
	PlainText string `protobuf:"bytes,3,opt,name=plain_text,json=plainText,proto3,oneof" json:"plain_text,omitempty"`
}

func (*SecretValue_SecretRef) isSecretValue_Type() {}
func (*SecretValue_FilePath) isSecretValue_Type()  {}
func (*SecretValue_PlainText) isSecretValue_Type() {}

func (m *SecretValue) GetType() isSecretValue_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *SecretValue) GetSecretRef() *SecretRef {
	if x, ok := m.GetType().(*SecretValue_SecretRef); ok {
		return x.SecretRef
	}
	return nil
}

func (m *SecretValue) GetFilePath() string {
	if x, ok := m.GetType().(*SecretValue_FilePath); ok {
		return x.FilePath
	}
	return ""
}

func (m *SecretValue) GetPlainText() string {
	if x, ok := m.GetType().(*SecretValue_PlainText); ok {
		return x.PlainText
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SecretValue) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SecretValue_SecretRef)(nil),
		(*SecretValue_FilePath)(nil),
		(*SecretValue_PlainText)(nil),
	}
}

// Wraps a collection of FlavorCompatibilityInfo
type FlavorCompatibility struct {
	CompatiblePairs      []*CompatibleFlavorMeshPair `protobuf:"bytes,1,rep,name=compatible_pairs,json=compatiblePairs,proto3" json:"compatible_pairs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *FlavorCompatibility) Reset()         { *m = FlavorCompatibility{} }
func (m *FlavorCompatibility) String() string { return proto.CompactTextString(m) }
func (*FlavorCompatibility) ProtoMessage()    {}
func (*FlavorCompatibility) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{14}
}
func (m *FlavorCompatibility) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlavorCompatibility.Unmarshal(m, b)
}
func (m *FlavorCompatibility) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlavorCompatibility.Marshal(b, m, deterministic)
}
func (m *FlavorCompatibility) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlavorCompatibility.Merge(m, src)
}
func (m *FlavorCompatibility) XXX_Size() int {
	return xxx_messageInfo_FlavorCompatibility.Size(m)
}
func (m *FlavorCompatibility) XXX_DiscardUnknown() {
	xxx_messageInfo_FlavorCompatibility.DiscardUnknown(m)
}

var xxx_messageInfo_FlavorCompatibility proto.InternalMessageInfo

func (m *FlavorCompatibility) GetCompatiblePairs() []*CompatibleFlavorMeshPair {
	if m != nil {
		return m.CompatiblePairs
	}
	return nil
}

// Represents a Flavor and a Mesh instance that are compatible with one another.
type CompatibleFlavorMeshPair struct {
	Flavor               *Flavor           `protobuf:"bytes,1,opt,name=flavor,proto3" json:"flavor,omitempty"`
	Mesh                 *core.ResourceRef `protobuf:"bytes,2,opt,name=mesh,proto3" json:"mesh,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CompatibleFlavorMeshPair) Reset()         { *m = CompatibleFlavorMeshPair{} }
func (m *CompatibleFlavorMeshPair) String() string { return proto.CompactTextString(m) }
func (*CompatibleFlavorMeshPair) ProtoMessage()    {}
func (*CompatibleFlavorMeshPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{15}
}
func (m *CompatibleFlavorMeshPair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompatibleFlavorMeshPair.Unmarshal(m, b)
}
func (m *CompatibleFlavorMeshPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompatibleFlavorMeshPair.Marshal(b, m, deterministic)
}
func (m *CompatibleFlavorMeshPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompatibleFlavorMeshPair.Merge(m, src)
}
func (m *CompatibleFlavorMeshPair) XXX_Size() int {
	return xxx_messageInfo_CompatibleFlavorMeshPair.Size(m)
}
func (m *CompatibleFlavorMeshPair) XXX_DiscardUnknown() {
	xxx_messageInfo_CompatibleFlavorMeshPair.DiscardUnknown(m)
}

var xxx_messageInfo_CompatibleFlavorMeshPair proto.InternalMessageInfo

func (m *CompatibleFlavorMeshPair) GetFlavor() *Flavor {
	if m != nil {
		return m.Flavor
	}
	return nil
}

func (m *CompatibleFlavorMeshPair) GetMesh() *core.ResourceRef {
	if m != nil {
		return m.Mesh
	}
	return nil
}

// Represents a set of requirements that all need to be satisfied.
type RequirementSet struct {
	MeshRequirement      *MeshRequirement `protobuf:"bytes,1,opt,name=mesh_requirement,json=meshRequirement,proto3" json:"mesh_requirement,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RequirementSet) Reset()         { *m = RequirementSet{} }
func (m *RequirementSet) String() string { return proto.CompactTextString(m) }
func (*RequirementSet) ProtoMessage()    {}
func (*RequirementSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{16}
}
func (m *RequirementSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequirementSet.Unmarshal(m, b)
}
func (m *RequirementSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequirementSet.Marshal(b, m, deterministic)
}
func (m *RequirementSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequirementSet.Merge(m, src)
}
func (m *RequirementSet) XXX_Size() int {
	return xxx_messageInfo_RequirementSet.Size(m)
}
func (m *RequirementSet) XXX_DiscardUnknown() {
	xxx_messageInfo_RequirementSet.DiscardUnknown(m)
}

var xxx_messageInfo_RequirementSet proto.InternalMessageInfo

func (m *RequirementSet) GetMeshRequirement() *MeshRequirement {
	if m != nil {
		return m.MeshRequirement
	}
	return nil
}

// Represents the requirement for a mesh to be installed.
type MeshRequirement struct {
	// Type of mesh
	MeshType MeshType `protobuf:"varint,1,opt,name=mesh_type,json=meshType,proto3,enum=hub.solo.io.MeshType" json:"mesh_type,omitempty"`
	// Range of allowed versions. If empty, any version is allowed.
	Versions             *AllowedVersions `protobuf:"bytes,2,opt,name=versions,proto3" json:"versions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MeshRequirement) Reset()         { *m = MeshRequirement{} }
func (m *MeshRequirement) String() string { return proto.CompactTextString(m) }
func (*MeshRequirement) ProtoMessage()    {}
func (*MeshRequirement) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{17}
}
func (m *MeshRequirement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshRequirement.Unmarshal(m, b)
}
func (m *MeshRequirement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshRequirement.Marshal(b, m, deterministic)
}
func (m *MeshRequirement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshRequirement.Merge(m, src)
}
func (m *MeshRequirement) XXX_Size() int {
	return xxx_messageInfo_MeshRequirement.Size(m)
}
func (m *MeshRequirement) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshRequirement.DiscardUnknown(m)
}

var xxx_messageInfo_MeshRequirement proto.InternalMessageInfo

func (m *MeshRequirement) GetMeshType() MeshType {
	if m != nil {
		return m.MeshType
	}
	return MeshType_ISTIO
}

func (m *MeshRequirement) GetVersions() *AllowedVersions {
	if m != nil {
		return m.Versions
	}
	return nil
}

// A directory inside of a github repo
type GithubRepositoryLocation struct {
	Org                  string   `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`
	Repo                 string   `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"`
	Ref                  string   `protobuf:"bytes,3,opt,name=ref,proto3" json:"ref,omitempty"`
	Directory            string   `protobuf:"bytes,4,opt,name=directory,proto3" json:"directory,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GithubRepositoryLocation) Reset()         { *m = GithubRepositoryLocation{} }
func (m *GithubRepositoryLocation) String() string { return proto.CompactTextString(m) }
func (*GithubRepositoryLocation) ProtoMessage()    {}
func (*GithubRepositoryLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{18}
}
func (m *GithubRepositoryLocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GithubRepositoryLocation.Unmarshal(m, b)
}
func (m *GithubRepositoryLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GithubRepositoryLocation.Marshal(b, m, deterministic)
}
func (m *GithubRepositoryLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GithubRepositoryLocation.Merge(m, src)
}
func (m *GithubRepositoryLocation) XXX_Size() int {
	return xxx_messageInfo_GithubRepositoryLocation.Size(m)
}
func (m *GithubRepositoryLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_GithubRepositoryLocation.DiscardUnknown(m)
}

var xxx_messageInfo_GithubRepositoryLocation proto.InternalMessageInfo

func (m *GithubRepositoryLocation) GetOrg() string {
	if m != nil {
		return m.Org
	}
	return ""
}

func (m *GithubRepositoryLocation) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *GithubRepositoryLocation) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *GithubRepositoryLocation) GetDirectory() string {
	if m != nil {
		return m.Directory
	}
	return ""
}

// Location of a gzipped tar file
type TgzLocation struct {
	Uri                  string   `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TgzLocation) Reset()         { *m = TgzLocation{} }
func (m *TgzLocation) String() string { return proto.CompactTextString(m) }
func (*TgzLocation) ProtoMessage()    {}
func (*TgzLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{19}
}
func (m *TgzLocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TgzLocation.Unmarshal(m, b)
}
func (m *TgzLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TgzLocation.Marshal(b, m, deterministic)
}
func (m *TgzLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TgzLocation.Merge(m, src)
}
func (m *TgzLocation) XXX_Size() int {
	return xxx_messageInfo_TgzLocation.Size(m)
}
func (m *TgzLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_TgzLocation.DiscardUnknown(m)
}

var xxx_messageInfo_TgzLocation proto.InternalMessageInfo

func (m *TgzLocation) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

type AllowedVersions struct {
	MinVersion           string   `protobuf:"bytes,2,opt,name=min_version,json=minVersion,proto3" json:"min_version,omitempty"`
	MaxVersion           string   `protobuf:"bytes,3,opt,name=max_version,json=maxVersion,proto3" json:"max_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllowedVersions) Reset()         { *m = AllowedVersions{} }
func (m *AllowedVersions) String() string { return proto.CompactTextString(m) }
func (*AllowedVersions) ProtoMessage()    {}
func (*AllowedVersions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ad3a89626d72ea, []int{20}
}
func (m *AllowedVersions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllowedVersions.Unmarshal(m, b)
}
func (m *AllowedVersions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllowedVersions.Marshal(b, m, deterministic)
}
func (m *AllowedVersions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllowedVersions.Merge(m, src)
}
func (m *AllowedVersions) XXX_Size() int {
	return xxx_messageInfo_AllowedVersions.Size(m)
}
func (m *AllowedVersions) XXX_DiscardUnknown() {
	xxx_messageInfo_AllowedVersions.DiscardUnknown(m)
}

var xxx_messageInfo_AllowedVersions proto.InternalMessageInfo

func (m *AllowedVersions) GetMinVersion() string {
	if m != nil {
		return m.MinVersion
	}
	return ""
}

func (m *AllowedVersions) GetMaxVersion() string {
	if m != nil {
		return m.MaxVersion
	}
	return ""
}

func init() {
	proto.RegisterEnum("hub.solo.io.ParameterType", ParameterType_name, ParameterType_value)
	proto.RegisterEnum("hub.solo.io.ApplicationType", ApplicationType_name, ApplicationType_value)
	proto.RegisterEnum("hub.solo.io.MeshType", MeshType_name, MeshType_value)
	proto.RegisterType((*ApplicationSpec)(nil), "hub.solo.io.ApplicationSpec")
	proto.RegisterType((*ApplicationSpecs)(nil), "hub.solo.io.ApplicationSpecs")
	proto.RegisterType((*VersionedApplicationSpec)(nil), "hub.solo.io.VersionedApplicationSpec")
	proto.RegisterMapType((map[string]string)(nil), "hub.solo.io.VersionedApplicationSpec.RequiredLabelsEntry")
	proto.RegisterType((*InstallationSteps)(nil), "hub.solo.io.InstallationSteps")
	proto.RegisterType((*InstallationSteps_Step)(nil), "hub.solo.io.InstallationSteps.Step")
	proto.RegisterType((*Flavor)(nil), "hub.solo.io.Flavor")
	proto.RegisterType((*Layer)(nil), "hub.solo.io.Layer")
	proto.RegisterType((*LayerOption)(nil), "hub.solo.io.LayerOption")
	proto.RegisterType((*EnvironmentRequirements)(nil), "hub.solo.io.EnvironmentRequirements")
	proto.RegisterType((*ResourceDependency)(nil), "hub.solo.io.ResourceDependency")
	proto.RegisterType((*ResourceDependency_Secret)(nil), "hub.solo.io.ResourceDependency.Secret")
	proto.RegisterType((*ResourceDependency_Application)(nil), "hub.solo.io.ResourceDependency.Application")
	proto.RegisterType((*Kustomize)(nil), "hub.solo.io.Kustomize")
	proto.RegisterType((*Parameter)(nil), "hub.solo.io.Parameter")
	proto.RegisterType((*ParameterValue)(nil), "hub.solo.io.ParameterValue")
	proto.RegisterType((*SecretRef)(nil), "hub.solo.io.SecretRef")
	proto.RegisterType((*SecretValue)(nil), "hub.solo.io.SecretValue")
	proto.RegisterType((*FlavorCompatibility)(nil), "hub.solo.io.FlavorCompatibility")
	proto.RegisterType((*CompatibleFlavorMeshPair)(nil), "hub.solo.io.CompatibleFlavorMeshPair")
	proto.RegisterType((*RequirementSet)(nil), "hub.solo.io.RequirementSet")
	proto.RegisterType((*MeshRequirement)(nil), "hub.solo.io.MeshRequirement")
	proto.RegisterType((*GithubRepositoryLocation)(nil), "hub.solo.io.GithubRepositoryLocation")
	proto.RegisterType((*TgzLocation)(nil), "hub.solo.io.TgzLocation")
	proto.RegisterType((*AllowedVersions)(nil), "hub.solo.io.AllowedVersions")
}

func init() { proto.RegisterFile("api/v1/registry.proto", fileDescriptor_d1ad3a89626d72ea) }

var fileDescriptor_d1ad3a89626d72ea = []byte{
	// 1879 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x4f, 0x73, 0x1b, 0x49,
	0x15, 0xf7, 0x48, 0xb2, 0x2c, 0x3d, 0xc9, 0xf6, 0xb8, 0xed, 0x64, 0x27, 0xca, 0x6e, 0xec, 0x68,
	0x09, 0xe5, 0x8d, 0x89, 0xbc, 0x31, 0x59, 0xd8, 0x85, 0x5a, 0x40, 0x76, 0x14, 0xdb, 0xbb, 0xb6,
	0xe5, 0x6a, 0x89, 0x85, 0xe5, 0xa2, 0x1a, 0x4b, 0x2d, 0xa9, 0x2b, 0xa3, 0xe9, 0xa1, 0xbb, 0x25,
	0xa2, 0x5c, 0xb8, 0xc0, 0x95, 0xe2, 0x53, 0x50, 0x7b, 0xe0, 0x03, 0x70, 0xe5, 0xc4, 0x9d, 0x2f,
	0x40, 0x15, 0x17, 0xbe, 0x01, 0x67, 0xaa, 0xbb, 0x67, 0x46, 0x33, 0xb2, 0xbc, 0x71, 0xa8, 0xec,
	0xc5, 0x9e, 0x7e, 0xef, 0xf7, 0x7e, 0xfd, 0xe7, 0xfd, 0xde, 0x9b, 0x1e, 0xc1, 0x1d, 0x37, 0xa0,
	0xfb, 0x93, 0xa7, 0xfb, 0x9c, 0x0c, 0xa8, 0x90, 0x7c, 0x5a, 0x0b, 0x38, 0x93, 0x0c, 0x95, 0x86,
	0xe3, 0xab, 0x9a, 0x60, 0x1e, 0xab, 0x51, 0x56, 0xd9, 0x1a, 0xb0, 0x01, 0xd3, 0xf6, 0x7d, 0xf5,
	0x64, 0x20, 0x95, 0xed, 0x01, 0x63, 0x03, 0x8f, 0xec, 0xeb, 0xd1, 0xd5, 0xb8, 0xbf, 0x2f, 0xe9,
	0x88, 0x08, 0xe9, 0x8e, 0x82, 0x10, 0xf0, 0x83, 0x01, 0x95, 0x8a, 0xa6, 0xcb, 0x46, 0xfb, 0x8a,
	0xea, 0x09, 0x65, 0xe6, 0xff, 0x4b, 0x2a, 0xf7, 0xe3, 0x69, 0xfb, 0x06, 0x5d, 0xfd, 0x7b, 0x0e,
	0xd6, 0xeb, 0x41, 0xe0, 0xd1, 0xae, 0x2b, 0x29, 0xf3, 0x5b, 0x01, 0xe9, 0xa2, 0x8f, 0x21, 0x27,
	0xa7, 0x01, 0x71, 0xac, 0x1d, 0x6b, 0x77, 0xed, 0xe0, 0xfd, 0x5a, 0x62, 0x51, 0xb5, 0x04, 0xb6,
	0x3d, 0x0d, 0x08, 0xd6, 0x48, 0x84, 0x20, 0xe7, 0xbb, 0x23, 0xe2, 0x64, 0x76, 0xac, 0xdd, 0x22,
	0xd6, 0xcf, 0xe8, 0x1e, 0x14, 0x3c, 0x36, 0x60, 0x9d, 0x31, 0xf7, 0x9c, 0xac, 0xb6, 0xaf, 0xa8,
	0xf1, 0x2f, 0xb9, 0x87, 0xf6, 0x60, 0x43, 0x0c, 0x19, 0x97, 0x9d, 0x1e, 0x11, 0x5d, 0x4e, 0x03,
	0xc5, 0xe6, 0xe4, 0x34, 0xc6, 0xd6, 0x8e, 0xe7, 0x33, 0x3b, 0xfa, 0x08, 0x6c, 0x8f, 0xf9, 0x83,
	0x14, 0x76, 0x59, 0x63, 0xd7, 0x95, 0x3d, 0x09, 0xdd, 0x83, 0x8d, 0x1e, 0xeb, 0x8e, 0x47, 0xc4,
	0x97, 0x7a, 0x85, 0x7a, 0xee, 0xbc, 0xe1, 0x4d, 0x39, 0xd4, 0x22, 0x1e, 0xc1, 0x1a, 0x27, 0x01,
	0x13, 0x54, 0x32, 0x3e, 0xd5, 0xc8, 0x15, 0x8d, 0x5c, 0x9d, 0x59, 0x15, 0x6c, 0x1f, 0x36, 0xdd,
	0xd9, 0x9e, 0x3b, 0x5d, 0x4e, 0x5c, 0xc9, 0xb8, 0x53, 0xd0, 0x58, 0x94, 0x70, 0x1d, 0x19, 0x0f,
	0x7a, 0x0a, 0x5b, 0xc9, 0x80, 0x80, 0xb3, 0x09, 0xed, 0x11, 0xee, 0x14, 0x75, 0x44, 0x92, 0xec,
	0x32, 0x74, 0xa1, 0x4f, 0xe0, 0x6e, 0x32, 0x64, 0xe4, 0x52, 0x5f, 0xba, 0xd4, 0x27, 0xdc, 0x01,
	0x1d, 0x74, 0x27, 0xe1, 0x3d, 0x8f, 0x9d, 0xe8, 0x08, 0xca, 0x3d, 0x57, 0x12, 0xb3, 0x26, 0xd2,
	0x73, 0x4a, 0x3b, 0xd6, 0x6e, 0xe9, 0xa0, 0x52, 0x33, 0x0a, 0xa9, 0x45, 0x0a, 0xa9, 0xb5, 0x23,
	0x85, 0x1c, 0xe6, 0xfe, 0xfc, 0xaf, 0x6d, 0x0b, 0x97, 0x54, 0xd4, 0x91, 0x09, 0x42, 0x75, 0x28,
	0x4c, 0x08, 0x17, 0x94, 0xf9, 0xc2, 0x29, 0xef, 0x64, 0x77, 0x4b, 0x07, 0x8f, 0x52, 0x09, 0xff,
	0xca, 0x38, 0x49, 0x6f, 0x4e, 0x25, 0x38, 0x0e, 0xab, 0xbe, 0x00, 0x7b, 0xce, 0x29, 0xd0, 0x01,
	0x2c, 0x0b, 0xf5, 0xe0, 0x58, 0x9a, 0xf3, 0x46, 0x11, 0x69, 0x2a, 0x03, 0xad, 0xfe, 0x25, 0x0f,
	0xce, 0x4d, 0xd3, 0x21, 0x07, 0x56, 0xc2, 0x09, 0xb5, 0x2e, 0x8b, 0x38, 0x1a, 0xa2, 0x63, 0x58,
	0xd3, 0xc7, 0x10, 0x8c, 0xaf, 0x3c, 0x2a, 0x86, 0xa4, 0xa7, 0x65, 0x78, 0x9b, 0x83, 0x58, 0x55,
	0x71, 0x97, 0x51, 0x18, 0xfa, 0x02, 0xca, 0xa6, 0x76, 0x3a, 0xdd, 0xa1, 0xcb, 0xa5, 0xb3, 0xaa,
	0x69, 0xd2, 0xc7, 0x71, 0xac, 0x01, 0x38, 0x96, 0xc8, 0x19, 0x33, 0x6b, 0x3c, 0x59, 0xc2, 0x25,
	0x13, 0x7c, 0xa4, 0x62, 0xd1, 0xe7, 0x50, 0x1e, 0x12, 0x6f, 0xd4, 0x71, 0x79, 0x77, 0x48, 0x27,
	0xc4, 0x59, 0xd3, 0x5c, 0x4e, 0x8a, 0xab, 0x3d, 0x78, 0x9d, 0x0c, 0x57, 0xf8, 0xba, 0x81, 0xa3,
	0x63, 0xd8, 0x18, 0xb9, 0x3e, 0xed, 0x13, 0x21, 0x45, 0xcc, 0xb1, 0xfe, 0x46, 0x0e, 0x3b, 0x0e,
	0x8a, 0x88, 0x9a, 0x80, 0xa8, 0x2f, 0xa4, 0xeb, 0x79, 0x46, 0x5b, 0x42, 0x92, 0x40, 0x38, 0xb6,
	0x66, 0x7a, 0x90, 0x62, 0x3a, 0x4d, 0xc0, 0x5a, 0x0a, 0x75, 0xb2, 0x84, 0x37, 0xe8, 0xbc, 0x11,
	0x6d, 0x43, 0x69, 0xe2, 0x7a, 0x63, 0x22, 0x3a, 0x53, 0x77, 0xe4, 0x39, 0x0f, 0x74, 0x2e, 0xc0,
	0x98, 0xbe, 0x76, 0x47, 0x1e, 0xba, 0x82, 0x75, 0x4e, 0x7e, 0x3b, 0xa6, 0x9c, 0xf4, 0x3a, 0x9e,
	0x7b, 0x45, 0x3c, 0xe1, 0x6c, 0x6b, 0x0d, 0x7c, 0x76, 0x2b, 0x5d, 0xd5, 0x70, 0x18, 0x7c, 0xa6,
	0x63, 0x1b, 0xbe, 0xe4, 0x53, 0xbc, 0xc6, 0x53, 0x46, 0xf4, 0x04, 0x56, 0xfa, 0x9e, 0x3b, 0x61,
	0x5c, 0x38, 0xbb, 0x9a, 0x7b, 0x33, 0xc5, 0xfd, 0x42, 0xfb, 0x70, 0x84, 0x41, 0x3f, 0x83, 0xfb,
	0x9c, 0x28, 0x8d, 0xc9, 0x4e, 0x74, 0x40, 0x1d, 0xd5, 0xa3, 0x44, 0xe0, 0x76, 0x89, 0x70, 0x3e,
	0xda, 0xb1, 0x76, 0x0b, 0xf8, 0x5e, 0x08, 0x39, 0x0f, 0x11, 0x17, 0x31, 0x00, 0xfd, 0x08, 0x20,
	0x70, 0xb9, 0x3b, 0x22, 0x92, 0x70, 0xe1, 0x3c, 0xd6, 0x33, 0xde, 0x4d, 0xcd, 0x78, 0x19, 0xb9,
	0x71, 0x02, 0x59, 0xa9, 0xc3, 0xe6, 0x82, 0xdd, 0x20, 0x1b, 0xb2, 0x2f, 0xc9, 0x34, 0x94, 0xb1,
	0x7a, 0x44, 0x5b, 0xb0, 0xac, 0x4f, 0x30, 0x6c, 0xa0, 0x66, 0xf0, 0x93, 0xcc, 0xa7, 0xd6, 0xe1,
	0x26, 0x6c, 0xa4, 0xf3, 0x17, 0x90, 0x6e, 0xf5, 0x1f, 0x19, 0xd8, 0xb8, 0x96, 0x2e, 0xf4, 0x19,
	0x2c, 0x9b, 0xec, 0x9a, 0x92, 0xfb, 0xf0, 0xdb, 0xb3, 0x5b, 0x53, 0x7f, 0xb1, 0x89, 0xa8, 0xfc,
	0xd7, 0x82, 0x9c, 0x1a, 0xc7, 0x8d, 0x3c, 0x97, 0x68, 0xe4, 0xf3, 0x65, 0x61, 0xbd, 0xc3, 0xb2,
	0xc8, 0xbc, 0x83, 0xb2, 0xc8, 0xbe, 0x7d, 0x59, 0x1c, 0xe6, 0x21, 0xa7, 0x76, 0x5e, 0xfd, 0x63,
	0x06, 0xf2, 0x46, 0x2d, 0xf1, 0xd6, 0xad, 0xc4, 0xd6, 0x77, 0xa0, 0x94, 0x7c, 0xed, 0x98, 0xec,
	0x24, 0x4d, 0xa8, 0x01, 0x5b, 0xdd, 0xb1, 0x90, 0x6c, 0x44, 0x5f, 0x9b, 0x04, 0x79, 0xee, 0x54,
	0x89, 0x24, 0xab, 0x73, 0x80, 0x52, 0x8b, 0x3a, 0x53, 0x2e, 0xbc, 0x99, 0xc2, 0x6b, 0x9b, 0x40,
	0x2f, 0xc0, 0x0e, 0x25, 0xae, 0xde, 0x51, 0x1d, 0x41, 0xa4, 0x70, 0x72, 0x9a, 0xe2, 0x7e, 0x8a,
	0x02, 0xcf, 0x40, 0x2d, 0x22, 0xf1, 0x3a, 0x4f, 0x8d, 0xe7, 0x95, 0xba, 0x7c, 0x5b, 0xa5, 0x56,
	0xff, 0x6a, 0xc1, 0xb2, 0x5e, 0x0a, 0x5a, 0x83, 0x0c, 0xed, 0x85, 0x87, 0x90, 0xa1, 0x3d, 0xf4,
	0x10, 0xca, 0x3d, 0x2a, 0x02, 0xcf, 0x9d, 0x76, 0x12, 0xaf, 0xf8, 0x52, 0x68, 0xbb, 0x58, 0x70,
	0x4a, 0xd9, 0xeb, 0xa7, 0x54, 0x81, 0x02, 0xd3, 0x4f, 0xae, 0xa7, 0xa5, 0x55, 0xc0, 0xf1, 0x18,
	0x1d, 0xc0, 0x8a, 0x79, 0x8e, 0xd6, 0xeb, 0x5c, 0x3f, 0xb4, 0xa6, 0x06, 0xe0, 0x08, 0x58, 0xfd,
	0x67, 0x06, 0x4a, 0x09, 0xc7, 0x77, 0xb3, 0xe8, 0x67, 0x50, 0x7c, 0x19, 0xa6, 0xca, 0x14, 0xc4,
	0xfc, 0x51, 0x7e, 0x19, 0x79, 0xf1, 0x0c, 0xa8, 0xfa, 0xa3, 0x56, 0xb8, 0xe9, 0x88, 0xe1, 0x4d,
	0x05, 0x94, 0xe9, 0x2b, 0x6d, 0x99, 0x4b, 0x51, 0xfe, 0xb6, 0x29, 0x42, 0x1d, 0x70, 0x88, 0x3f,
	0xa1, 0x9c, 0xf9, 0x5a, 0x22, 0x89, 0xcc, 0x0b, 0x67, 0x45, 0xb3, 0x7c, 0x2f, 0xc5, 0xd2, 0x98,
	0x81, 0x13, 0xaa, 0x11, 0xf8, 0x3d, 0xb2, 0xd8, 0x51, 0x65, 0xf0, 0xde, 0x0d, 0x31, 0xa8, 0x0d,
	0x77, 0x38, 0x11, 0x6c, 0xcc, 0xbb, 0xa4, 0xd3, 0x23, 0x01, 0xf1, 0x7b, 0xc4, 0xef, 0x52, 0x12,
	0xb5, 0x9a, 0xed, 0x39, 0x8d, 0x1a, 0xe4, 0xf3, 0x08, 0x38, 0xc5, 0x5b, 0x7c, 0xde, 0x46, 0x89,
	0xa8, 0xfe, 0x21, 0x03, 0xe8, 0x3a, 0x18, 0xfd, 0x02, 0xf2, 0x82, 0x74, 0x39, 0x89, 0x3a, 0xcd,
	0xf7, 0xdf, 0xc0, 0x5e, 0x6b, 0x69, 0xf4, 0xc9, 0x12, 0x0e, 0xe3, 0x50, 0x13, 0x4a, 0x89, 0x1b,
	0x53, 0xd8, 0x64, 0xf6, 0xde, 0x44, 0x93, 0x78, 0x11, 0xa9, 0xbe, 0x93, 0x60, 0xa8, 0x7c, 0x0c,
	0x79, 0x33, 0xc9, 0xc2, 0x2e, 0x81, 0x20, 0xf7, 0x92, 0x4c, 0x85, 0x93, 0xd9, 0xc9, 0x2a, 0x9b,
	0x7a, 0xae, 0x3c, 0x84, 0x52, 0x82, 0x6f, 0x51, 0x98, 0xea, 0x41, 0xea, 0xf2, 0x5c, 0xfd, 0x9b,
	0x05, 0xc5, 0x58, 0x4a, 0xe8, 0xe7, 0x90, 0x37, 0x0d, 0xf3, 0x6d, 0xfb, 0x6c, 0x18, 0x86, 0x7e,
	0x0a, 0x25, 0x39, 0x78, 0xfd, 0x16, 0x1d, 0x16, 0xe4, 0xe0, 0x75, 0xd4, 0x60, 0x1f, 0x42, 0x99,
	0x4d, 0x08, 0x57, 0x85, 0x13, 0xb8, 0x72, 0x18, 0x95, 0x45, 0x68, 0xbb, 0x74, 0xe5, 0xf0, 0x10,
	0xd4, 0xbd, 0xde, 0x04, 0x57, 0xff, 0x63, 0x41, 0x31, 0x56, 0xeb, 0xff, 0xd9, 0x41, 0x6b, 0xe1,
	0xd7, 0x46, 0x56, 0x7f, 0x6d, 0x54, 0x16, 0x57, 0x42, 0xe2, 0x5b, 0xe3, 0x13, 0x58, 0xe9, 0x91,
	0xbe, 0x3b, 0xf6, 0x64, 0x58, 0x94, 0xf7, 0x17, 0x87, 0xe8, 0x72, 0xc3, 0x11, 0x56, 0xb5, 0xa0,
	0xe8, 0x12, 0xa1, 0x8b, 0xb2, 0x80, 0xe3, 0xf1, 0xb5, 0x76, 0x91, 0xbf, 0xd6, 0x2e, 0xaa, 0xdf,
	0x64, 0x60, 0x2d, 0x4d, 0x8d, 0x3e, 0x84, 0xb2, 0x90, 0x9c, 0xfa, 0x03, 0x53, 0xeb, 0x66, 0xdb,
	0x4a, 0x39, 0xc6, 0x6a, 0x40, 0x1f, 0x40, 0x91, 0xfa, 0xb2, 0x33, 0x7b, 0xbb, 0x67, 0x4f, 0x96,
	0x70, 0x81, 0xfa, 0xd2, 0xb8, 0x1f, 0x42, 0xa9, 0xef, 0x31, 0x37, 0x02, 0xa8, 0x33, 0xb0, 0x54,
	0x4a, 0xb4, 0xd1, 0x40, 0x1e, 0xc1, 0xea, 0x15, 0x63, 0x1e, 0x71, 0xfd, 0x10, 0xa4, 0x1b, 0xe8,
	0xc9, 0x12, 0x2e, 0x87, 0x66, 0x03, 0xab, 0x03, 0xe8, 0x5b, 0xb0, 0xc1, 0x2c, 0xdf, 0xee, 0x06,
	0x7c, 0xb2, 0x84, 0x8b, 0x2a, 0xca, 0x50, 0x7c, 0x0e, 0x65, 0x53, 0x40, 0x21, 0x49, 0x7e, 0x81,
	0x74, 0x4c, 0x19, 0x68, 0xbc, 0xde, 0xea, 0x6c, 0x18, 0xeb, 0xf9, 0x0b, 0x28, 0x1a, 0x14, 0x26,
	0x7d, 0xb4, 0x07, 0x59, 0x4e, 0xfa, 0xa1, 0x96, 0xef, 0xd5, 0xba, 0x8c, 0x93, 0x6b, 0x35, 0x88,
	0x49, 0x1f, 0x2b, 0x54, 0x74, 0x31, 0xca, 0xc4, 0x17, 0xa3, 0xea, 0x9f, 0x2c, 0x28, 0x25, 0xa6,
	0x44, 0x3f, 0x06, 0x08, 0x97, 0x38, 0x63, 0xbd, 0xbb, 0x60, 0x81, 0x98, 0xf4, 0xd5, 0xde, 0x44,
	0xbc, 0x8e, 0x0f, 0xa0, 0xd8, 0xa7, 0x1e, 0x31, 0xaa, 0xce, 0x84, 0x99, 0x2a, 0x28, 0x93, 0x12,
	0x35, 0xda, 0x06, 0x08, 0x3c, 0x97, 0xfa, 0x1d, 0x49, 0x5e, 0x49, 0xa3, 0x7a, 0x15, 0xaf, 0x6d,
	0x6d, 0xf2, 0x4a, 0xc6, 0x9b, 0x1b, 0xc0, 0xa6, 0xb9, 0x2f, 0x1c, 0xb1, 0x51, 0xe0, 0x4a, 0x7a,
	0x45, 0x3d, 0x2a, 0xa7, 0xe8, 0x12, 0xec, 0x6e, 0x68, 0xd0, 0x93, 0x50, 0x1e, 0xf5, 0xc6, 0x74,
	0xfd, 0x1e, 0xc5, 0x20, 0xc3, 0x72, 0x4e, 0xc4, 0xf0, 0xd2, 0xa5, 0x1c, 0xaf, 0xcf, 0xc2, 0xd5,
	0x58, 0x54, 0x27, 0xe0, 0xdc, 0x04, 0x46, 0x7b, 0x90, 0x37, 0x57, 0xdb, 0xf0, 0x04, 0x16, 0xde,
	0x7e, 0x43, 0x08, 0x7a, 0x02, 0xb9, 0x11, 0x11, 0xc3, 0xb0, 0x11, 0x7c, 0x4b, 0x0a, 0x34, 0xac,
	0xfa, 0x35, 0xac, 0xa5, 0x2f, 0x19, 0xe8, 0x18, 0x6c, 0xe5, 0x49, 0xbe, 0x71, 0xc2, 0x79, 0xd3,
	0x5f, 0x75, 0x6a, 0x79, 0x89, 0x50, 0xbc, 0x3e, 0x4a, 0x1b, 0xaa, 0xbf, 0x87, 0xf5, 0x39, 0x0c,
	0x3a, 0x80, 0xa2, 0xe6, 0x4e, 0xfc, 0xde, 0x70, 0xe7, 0x1a, 0xa9, 0x2e, 0xfe, 0xc2, 0x28, 0x7c,
	0x42, 0x9f, 0x26, 0xbe, 0x58, 0x33, 0x0b, 0xd6, 0x51, 0xf7, 0x3c, 0xf6, 0x3b, 0xd2, 0x0b, 0x3f,
	0x30, 0x44, 0xe2, 0x43, 0x35, 0x00, 0xe7, 0xa6, 0x06, 0xaa, 0xb4, 0xc7, 0xf8, 0x20, 0xba, 0x94,
	0x33, 0x3e, 0x50, 0xed, 0x8c, 0x93, 0x80, 0x45, 0x3f, 0x6a, 0xa8, 0x67, 0x85, 0x52, 0xc2, 0x33,
	0x6d, 0x51, 0x6b, 0xf6, 0x7d, 0x28, 0xf6, 0x28, 0x27, 0x5d, 0x45, 0x16, 0x5e, 0x9b, 0x67, 0x86,
	0xea, 0x36, 0x94, 0x12, 0xcd, 0x56, 0x85, 0x8f, 0x39, 0x8d, 0x26, 0x19, 0x73, 0x5a, 0x6d, 0xc1,
	0xfa, 0xdc, 0x7a, 0xd5, 0x0d, 0x62, 0x44, 0xfd, 0x4e, 0xf4, 0xb5, 0x6b, 0xa6, 0x87, 0x11, 0xf5,
	0x43, 0x84, 0x06, 0xb8, 0xaf, 0x62, 0x40, 0x36, 0x04, 0xb8, 0xaf, 0x42, 0xc0, 0xe3, 0x26, 0xac,
	0xa6, 0x3a, 0x27, 0x02, 0xc8, 0xb7, 0xda, 0xf8, 0xf4, 0xe2, 0xd8, 0x5e, 0x42, 0x45, 0x58, 0x7e,
	0x71, 0xd6, 0xac, 0xb7, 0x6d, 0x0b, 0x15, 0x20, 0x77, 0xd8, 0x6c, 0x9e, 0xd9, 0x19, 0xb4, 0x02,
	0xd9, 0xd3, 0x8b, 0xb6, 0x9d, 0x55, 0xa6, 0xe7, 0xf5, 0x76, 0xc3, 0xce, 0xe9, 0x98, 0xc6, 0x11,
	0x6e, 0xb4, 0xed, 0xe5, 0xc7, 0xcf, 0x52, 0x3f, 0x12, 0x69, 0xca, 0x55, 0x28, 0x36, 0x7e, 0xdd,
	0x6e, 0x5c, 0xb4, 0x4e, 0x9b, 0x17, 0xf6, 0x92, 0x8e, 0x6b, 0x9c, 0x37, 0x0d, 0xe9, 0x79, 0xa3,
	0x75, 0x62, 0x67, 0x1e, 0x3f, 0x83, 0x42, 0x94, 0x3e, 0x35, 0xeb, 0x69, 0xab, 0x7d, 0xda, 0xb4,
	0x97, 0x50, 0x09, 0x56, 0xce, 0x4e, 0x2f, 0xbe, 0x6c, 0xe0, 0xe7, 0xb6, 0x85, 0x6c, 0x28, 0xd7,
	0x7f, 0xd5, 0xea, 0xd4, 0x2f, 0x2f, 0x3b, 0x26, 0xea, 0xb0, 0xf0, 0xcd, 0xbf, 0x1f, 0x58, 0xbf,
	0xc9, 0x4c, 0x9e, 0x5e, 0xe5, 0x75, 0xdb, 0xfa, 0xe1, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc5,
	0x74, 0x4f, 0xd3, 0x2d, 0x13, 0x00, 0x00,
}

func (this *ApplicationSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationSpec)
	if !ok {
		that2, ok := that.(ApplicationSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.LogoUrl != that1.LogoUrl {
		return false
	}
	if this.ShortDescription != that1.ShortDescription {
		return false
	}
	if this.LongDescription != that1.LongDescription {
		return false
	}
	if this.DocumentationUrl != that1.DocumentationUrl {
		return false
	}
	if this.RepositoryUrl != that1.RepositoryUrl {
		return false
	}
	if this.ApplicationCreator != that1.ApplicationCreator {
		return false
	}
	if this.ApplicationProvider != that1.ApplicationProvider {
		return false
	}
	if this.ApplicationMaintainer != that1.ApplicationMaintainer {
		return false
	}
	if that1.DateCreated == nil {
		if this.DateCreated != nil {
			return false
		}
	} else if !this.DateCreated.Equal(*that1.DateCreated) {
		return false
	}
	if len(this.Versions) != len(that1.Versions) {
		return false
	}
	for i := range this.Versions {
		if !this.Versions[i].Equal(that1.Versions[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ApplicationSpecs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationSpecs)
	if !ok {
		that2, ok := that.(ApplicationSpecs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Specs) != len(that1.Specs) {
		return false
	}
	for i := range this.Specs {
		if !this.Specs[i].Equal(that1.Specs[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *VersionedApplicationSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VersionedApplicationSpec)
	if !ok {
		that2, ok := that.(VersionedApplicationSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if that1.DatePublished == nil {
		if this.DatePublished != nil {
			return false
		}
	} else if !this.DatePublished.Equal(*that1.DatePublished) {
		return false
	}
	if that1.InstallationSpec == nil {
		if this.InstallationSpec != nil {
			return false
		}
	} else if this.InstallationSpec == nil {
		return false
	} else if !this.InstallationSpec.Equal(that1.InstallationSpec) {
		return false
	}
	if this.ValuesYaml != that1.ValuesYaml {
		return false
	}
	if len(this.RequiredLabels) != len(that1.RequiredLabels) {
		return false
	}
	for i := range this.RequiredLabels {
		if this.RequiredLabels[i] != that1.RequiredLabels[i] {
			return false
		}
	}
	if len(this.Flavors) != len(that1.Flavors) {
		return false
	}
	for i := range this.Flavors {
		if !this.Flavors[i].Equal(that1.Flavors[i]) {
			return false
		}
	}
	if this.RespectManifestNamespaces != that1.RespectManifestNamespaces {
		return false
	}
	if len(this.Parameters) != len(that1.Parameters) {
		return false
	}
	for i := range this.Parameters {
		if !this.Parameters[i].Equal(that1.Parameters[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *VersionedApplicationSpec_GithubChart) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VersionedApplicationSpec_GithubChart)
	if !ok {
		that2, ok := that.(VersionedApplicationSpec_GithubChart)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GithubChart.Equal(that1.GithubChart) {
		return false
	}
	return true
}
func (this *VersionedApplicationSpec_HelmArchive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VersionedApplicationSpec_HelmArchive)
	if !ok {
		that2, ok := that.(VersionedApplicationSpec_HelmArchive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HelmArchive.Equal(that1.HelmArchive) {
		return false
	}
	return true
}
func (this *VersionedApplicationSpec_ManifestsArchive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VersionedApplicationSpec_ManifestsArchive)
	if !ok {
		that2, ok := that.(VersionedApplicationSpec_ManifestsArchive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ManifestsArchive.Equal(that1.ManifestsArchive) {
		return false
	}
	return true
}
func (this *VersionedApplicationSpec_InstallationSteps) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VersionedApplicationSpec_InstallationSteps)
	if !ok {
		that2, ok := that.(VersionedApplicationSpec_InstallationSteps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InstallationSteps.Equal(that1.InstallationSteps) {
		return false
	}
	return true
}
func (this *InstallationSteps) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InstallationSteps)
	if !ok {
		that2, ok := that.(InstallationSteps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Steps) != len(that1.Steps) {
		return false
	}
	for i := range this.Steps {
		if !this.Steps[i].Equal(that1.Steps[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *InstallationSteps_Step) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InstallationSteps_Step)
	if !ok {
		that2, ok := that.(InstallationSteps_Step)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if that1.Step == nil {
		if this.Step != nil {
			return false
		}
	} else if this.Step == nil {
		return false
	} else if !this.Step.Equal(that1.Step) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *InstallationSteps_Step_GithubChart) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InstallationSteps_Step_GithubChart)
	if !ok {
		that2, ok := that.(InstallationSteps_Step_GithubChart)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GithubChart.Equal(that1.GithubChart) {
		return false
	}
	return true
}
func (this *InstallationSteps_Step_HelmArchive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InstallationSteps_Step_HelmArchive)
	if !ok {
		that2, ok := that.(InstallationSteps_Step_HelmArchive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HelmArchive.Equal(that1.HelmArchive) {
		return false
	}
	return true
}
func (this *InstallationSteps_Step_ManifestsArchive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InstallationSteps_Step_ManifestsArchive)
	if !ok {
		that2, ok := that.(InstallationSteps_Step_ManifestsArchive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ManifestsArchive.Equal(that1.ManifestsArchive) {
		return false
	}
	return true
}
func (this *Flavor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Flavor)
	if !ok {
		that2, ok := that.(Flavor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.CustomizationLayers) != len(that1.CustomizationLayers) {
		return false
	}
	for i := range this.CustomizationLayers {
		if !this.CustomizationLayers[i].Equal(that1.CustomizationLayers[i]) {
			return false
		}
	}
	if len(this.RequirementSets) != len(that1.RequirementSets) {
		return false
	}
	for i := range this.RequirementSets {
		if !this.RequirementSets[i].Equal(that1.RequirementSets[i]) {
			return false
		}
	}
	if len(this.Parameters) != len(that1.Parameters) {
		return false
	}
	for i := range this.Parameters {
		if !this.Parameters[i].Equal(that1.Parameters[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Layer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Layer)
	if !ok {
		that2, ok := that.(Layer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.DisplayName != that1.DisplayName {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Optional != that1.Optional {
		return false
	}
	if len(this.Options) != len(that1.Options) {
		return false
	}
	for i := range this.Options {
		if !this.Options[i].Equal(that1.Options[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LayerOption) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LayerOption)
	if !ok {
		that2, ok := that.(LayerOption)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.DisplayName != that1.DisplayName {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if !this.Kustomize.Equal(that1.Kustomize) {
		return false
	}
	if this.HelmValues != that1.HelmValues {
		return false
	}
	if len(this.Parameters) != len(that1.Parameters) {
		return false
	}
	for i := range this.Parameters {
		if !this.Parameters[i].Equal(that1.Parameters[i]) {
			return false
		}
	}
	if len(this.EnvironmentRequirements) != len(that1.EnvironmentRequirements) {
		return false
	}
	for i := range this.EnvironmentRequirements {
		if !this.EnvironmentRequirements[i].Equal(that1.EnvironmentRequirements[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *EnvironmentRequirements) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnvironmentRequirements)
	if !ok {
		that2, ok := that.(EnvironmentRequirements)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ResourceDependencies) != len(that1.ResourceDependencies) {
		return false
	}
	for i := range this.ResourceDependencies {
		if !this.ResourceDependencies[i].Equal(that1.ResourceDependencies[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ResourceDependency) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResourceDependency)
	if !ok {
		that2, ok := that.(ResourceDependency)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Type == nil {
		if this.Type != nil {
			return false
		}
	} else if this.Type == nil {
		return false
	} else if !this.Type.Equal(that1.Type) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ResourceDependency_Secret_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResourceDependency_Secret_)
	if !ok {
		that2, ok := that.(ResourceDependency_Secret_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Secret.Equal(that1.Secret) {
		return false
	}
	return true
}
func (this *ResourceDependency_Application_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResourceDependency_Application_)
	if !ok {
		that2, ok := that.(ResourceDependency_Application_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Application.Equal(that1.Application) {
		return false
	}
	return true
}
func (this *ResourceDependency_Secret) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResourceDependency_Secret)
	if !ok {
		that2, ok := that.(ResourceDependency_Secret)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Keys) != len(that1.Keys) {
		return false
	}
	for i := range this.Keys {
		if this.Keys[i] != that1.Keys[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ResourceDependency_Application) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResourceDependency_Application)
	if !ok {
		that2, ok := that.(ResourceDependency_Application)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Kustomize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Kustomize)
	if !ok {
		that2, ok := that.(Kustomize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Location == nil {
		if this.Location != nil {
			return false
		}
	} else if this.Location == nil {
		return false
	} else if !this.Location.Equal(that1.Location) {
		return false
	}
	if this.OverlayPath != that1.OverlayPath {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Kustomize_Github) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Kustomize_Github)
	if !ok {
		that2, ok := that.(Kustomize_Github)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Github.Equal(that1.Github) {
		return false
	}
	return true
}
func (this *Kustomize_TgzArchive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Kustomize_TgzArchive)
	if !ok {
		that2, ok := that.(Kustomize_TgzArchive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TgzArchive.Equal(that1.TgzArchive) {
		return false
	}
	return true
}
func (this *Parameter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Parameter)
	if !ok {
		that2, ok := that.(Parameter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.Default.Equal(that1.Default) {
		return false
	}
	if this.Required != that1.Required {
		return false
	}
	if this.DisplayName != that1.DisplayName {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ParameterValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ParameterValue)
	if !ok {
		that2, ok := that.(ParameterValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Type == nil {
		if this.Type != nil {
			return false
		}
	} else if this.Type == nil {
		return false
	} else if !this.Type.Equal(that1.Type) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ParameterValue_StringValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ParameterValue_StringValue)
	if !ok {
		that2, ok := that.(ParameterValue_StringValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StringValue != that1.StringValue {
		return false
	}
	return true
}
func (this *ParameterValue_IntValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ParameterValue_IntValue)
	if !ok {
		that2, ok := that.(ParameterValue_IntValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IntValue != that1.IntValue {
		return false
	}
	return true
}
func (this *ParameterValue_FloatValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ParameterValue_FloatValue)
	if !ok {
		that2, ok := that.(ParameterValue_FloatValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FloatValue != that1.FloatValue {
		return false
	}
	return true
}
func (this *ParameterValue_BooleanValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ParameterValue_BooleanValue)
	if !ok {
		that2, ok := that.(ParameterValue_BooleanValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BooleanValue != that1.BooleanValue {
		return false
	}
	return true
}
func (this *ParameterValue_DateValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ParameterValue_DateValue)
	if !ok {
		that2, ok := that.(ParameterValue_DateValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.DateValue == nil {
		if this.DateValue != nil {
			return false
		}
	} else if !this.DateValue.Equal(*that1.DateValue) {
		return false
	}
	return true
}
func (this *ParameterValue_SecretValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ParameterValue_SecretValue)
	if !ok {
		that2, ok := that.(ParameterValue_SecretValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SecretValue.Equal(that1.SecretValue) {
		return false
	}
	return true
}
func (this *SecretRef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecretRef)
	if !ok {
		that2, ok := that.(SecretRef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ref.Equal(that1.Ref) {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SecretValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecretValue)
	if !ok {
		that2, ok := that.(SecretValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Type == nil {
		if this.Type != nil {
			return false
		}
	} else if this.Type == nil {
		return false
	} else if !this.Type.Equal(that1.Type) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SecretValue_SecretRef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecretValue_SecretRef)
	if !ok {
		that2, ok := that.(SecretValue_SecretRef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SecretRef.Equal(that1.SecretRef) {
		return false
	}
	return true
}
func (this *SecretValue_FilePath) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecretValue_FilePath)
	if !ok {
		that2, ok := that.(SecretValue_FilePath)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FilePath != that1.FilePath {
		return false
	}
	return true
}
func (this *SecretValue_PlainText) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecretValue_PlainText)
	if !ok {
		that2, ok := that.(SecretValue_PlainText)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PlainText != that1.PlainText {
		return false
	}
	return true
}
func (this *FlavorCompatibility) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlavorCompatibility)
	if !ok {
		that2, ok := that.(FlavorCompatibility)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.CompatiblePairs) != len(that1.CompatiblePairs) {
		return false
	}
	for i := range this.CompatiblePairs {
		if !this.CompatiblePairs[i].Equal(that1.CompatiblePairs[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CompatibleFlavorMeshPair) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompatibleFlavorMeshPair)
	if !ok {
		that2, ok := that.(CompatibleFlavorMeshPair)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Flavor.Equal(that1.Flavor) {
		return false
	}
	if !this.Mesh.Equal(that1.Mesh) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RequirementSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequirementSet)
	if !ok {
		that2, ok := that.(RequirementSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MeshRequirement.Equal(that1.MeshRequirement) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MeshRequirement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshRequirement)
	if !ok {
		that2, ok := that.(MeshRequirement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MeshType != that1.MeshType {
		return false
	}
	if !this.Versions.Equal(that1.Versions) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GithubRepositoryLocation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GithubRepositoryLocation)
	if !ok {
		that2, ok := that.(GithubRepositoryLocation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Org != that1.Org {
		return false
	}
	if this.Repo != that1.Repo {
		return false
	}
	if this.Ref != that1.Ref {
		return false
	}
	if this.Directory != that1.Directory {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TgzLocation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TgzLocation)
	if !ok {
		that2, ok := that.(TgzLocation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uri != that1.Uri {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AllowedVersions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllowedVersions)
	if !ok {
		that2, ok := that.(AllowedVersions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinVersion != that1.MinVersion {
		return false
	}
	if this.MaxVersion != that1.MaxVersion {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
